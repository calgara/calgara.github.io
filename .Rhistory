recall$educ[recall$educ %in% 95] <- 2
recall$educ <- factor(recall$educ)
model <- lm(knowledge_scale~educ,data=recall,weights = weight)
coeftest(model, vcov = vcovHC(model, "HC0"))
predict <- data.frame(effect("educ", se=TRUE, mod = model, confidence.level = 0.95, xlevels=list(educ=seq(1,6,1),vcov. = vcovHC(model, "HC0"))))
ggplot(data= predict, mapping=aes(x=educ, y=fit,ymin=lower,ymax=upper,label=round(predict$fit,1))) + geom_errorbar(width=0.2,size=1) + geom_point(size=4, shape=21, fill="white") + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + scale_x_discrete("Voter Education Level",labels=c("> HS", "HS","Some \nCollege","2-Yr \nCollege","BA","Post-Grad")) + scale_y_continuous("Estimated Political Knowledge",breaks=seq(0,6,0.5)) + labs(title="Effect of Education on Citizen Political Knowledge",subtitle="Data: 2016 American National Election Study") + geom_text(size=3.5,hjust =0,nudge_x = 0.175)
###### Figure 8: Effect of Income on Political Knowledge ##########
model <- lm(knowledge_scale~income,data=recall,weights = weight)
coeftest(model, vcov = vcovHC(model, "HC0"))
predict <- data.frame(effect("income", se=TRUE, mod = model, confidence.level = 0.95, xlevels=list(income=seq(1,28,1),vcov. = vcovHC(model, "HC0"))))
ggplot(data= predict, mapping=aes(x=income, y=fit)) + geom_line(aes(x = income, y = fit), size = 0.50) + geom_ribbon(aes(ymin=lower, ymax=upper), alpha = .2) + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + scale_x_continuous("Voter Income Level",limits=c(1,28),breaks=c(1,28),labels=c("< $5,000","> $250,000")) + scale_y_continuous("Estimaed Political Knowledge") + labs(title="Effect of Income on Citizen Political Knowledge", subtitle="Data: 2016 American National Election Study")
###### Figure 9: Effect of Education on Political Participation (Turnout) ##########
# Role of resources in predicting campaign contributions & voting. This section articulates the resource bias in participation & voting
resources <- subset(cces_2016_2017_2018,cces_2016_2017_2018$year %in% c(2016,2018),select=c(year,weight,district,general_elex_turnout,contribute_money,income_clean,education_clean,white_respondent))
resources$year <- factor(resources$year)
# Turnout ~ Education
model <- glm(general_elex_turnout ~ education_clean*year, data=resources, weights=weight, family = binomial(link = "logit"))
coeftest(model, vcov = cluster.vcov(model, cluster=resources$district))
predict <- data.frame(effect("education_clean*year", se=TRUE, mod = model, confidence.level = 0.95, xlevels=list(year=c(2016,2018),vcov. = cluster.vcov(model, cluster=resources$district))))
predict$education <- factor(predict$education_clean,labels=c("No HS","High school","Some college","2-year","4-year","Post-grad"),levels=seq(0,5,1))
predict$year <- factor(predict$year,labels=c("2016 Presidential Election","2018 Midterm Election"))
ggplot(data= predict, mapping=aes(x=education, y=fit, ymin=lower, ymax=upper, fill=education,label=paste((round(predict$fit,2) * 100),"%",sep=""))) + geom_bar(stat="identity") + geom_errorbar(width=.25) + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + scale_x_discrete("Voter Education Level") + scale_y_continuous(limits=c(0,1.0), breaks=seq(0,1.0,0.05), "Probability of Turning Out to Vote") + labs(title="Probability of Voter Turnout by Education Level in the 2016 & 2018 Elections",caption="Data: 2016 & 2018 Cooperative Congressional Election Study Voter-Validated Study") + coord_cartesian(ylim=c(0.05,0.75)) + scale_fill_discrete(guide=FALSE) + geom_label(size=3.5,nudge_y = 0.05) + facet_wrap(~year)
###### Figure 10: Effect of Education on Political Participation (Campaign Donor) ##########
# Contribution ~ Education
model <- glm(contribute_money ~ education_clean*year, data=resources, weights=weight, family = binomial(link = "logit"))
coeftest(model, vcov = cluster.vcov(model, cluster=resources$district))
predict <- data.frame(effect("education_clean*year", se=TRUE, mod = model, confidence.level = 0.95, xlevels=list(year=c(2016,2018),vcov. = cluster.vcov(model, cluster=resources$district))))
predict$education <- factor(predict$education_clean,labels=c("No HS","High school","Some college","2-year","4-year","Post-grad"),levels=seq(0,5,1))
predict$year <- factor(predict$year,labels=c("2016 Presidential Election","2018 Midterm Election"))
ggplot(data= predict, mapping=aes(x=education, y=fit, ymin=lower, ymax=upper, fill=education,label=paste((round(predict$fit,2) * 100),"%",sep=""))) + geom_bar(stat="identity") + geom_errorbar(width=.25) + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + scale_x_discrete("Voter Education Level") + scale_y_continuous(limits=c(0,1.0), breaks=seq(0.05,0.40,0.05), expand=c(0,0), "Probability of Contributing to a Campaign") + labs(title="Probability of Being a Campaign Donor by Education Level in the 2016 & 2018 Elections",caption="Data: 2016 & 2018 Cooperative Congressional Election Study Voter-Validated Study") + coord_cartesian(ylim=c(0,0.45)) + scale_fill_discrete(guide=FALSE) + geom_label(size=3.5,nudge_y = 0.05) + facet_wrap(~year)
###### Figure 11: Effect of Income on Political Participation (Voter Turnout) ##########
model <- glm(general_elex_turnout ~ income_clean*year, data=resources, weights=weight, family = binomial(link = "logit"))
coeftest(model, vcov = cluster.vcov(model, cluster=resources$district))
predict <- data.frame(effect("income_clean*year", se=TRUE, mod = model, confidence.level = 0.95, xlevels=list(income_clean = seq(0,15,1), year=c(2016,2018), (vcov. = cluster.vcov(model, cluster=resources$district)))))
predict$year <- factor(predict$year,labels=c("2016 Presidential Election","2018 Midterm Election"))
ggplot(data= predict, mapping=aes(x=income_clean, y=fit)) + geom_line(aes(x = income_clean, y = fit), size = 0.50) + geom_ribbon(aes(ymin=lower, ymax=upper), alpha = .2) + scale_colour_manual("",values="black") + scale_fill_manual("",values="grey12") + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + scale_x_continuous(limits=c(0,15), breaks=c(0,15), labels=c("< $10,000", "> $500K"), "Voter Income") + scale_y_continuous(limits=c(0.3,0.80), breaks=seq(0.3,0.80,0.05), "Probability of Turning Out to Vote") + labs(title="Probability of Voter Turnout by Income Level in the 2016 & 2018 Elections",caption="Data: 2016 & 2018 Cooperative Congressional Election Study Voter-Validated Study") + facet_wrap(~year,ncol=2) + theme(panel.spacing = unit(2, "lines"))
###### Figure 12: Effect of Income on Political Participation (Turnout) ##########
# Contribution ~ Income
model <- glm(contribute_money ~ income_clean*year, data=resources, weights=weight, family = binomial(link = "logit"))
coeftest(model, vcov = cluster.vcov(model, cluster=resources$cdid))
predict <- data.frame(effect("income_clean*year", se=TRUE, mod = model, confidence.level = 0.95, xlevels=list(income_clean = seq(0,15,1), year=c(2016,2018), (vcov. = cluster.vcov(model, cluster=resources$district)))))
predict$year <- factor(predict$year,labels=c("2016 Presidential Election","2018 Midterm Election"))
ggplot(data= predict, mapping=aes(x=income_clean, y=fit)) + geom_line(aes(x = income_clean, y = fit), size = 0.50) + geom_ribbon(aes(ymin=lower, ymax=upper), alpha = .2) + scale_colour_manual("",values="black") + scale_fill_manual("",values="grey12") + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + scale_x_continuous(limits=c(0,15), breaks=c(0,15), labels=c("< $10,000", "> $500K"), "Voter Income") + scale_y_continuous(limits=c(0,0.50), breaks=seq(0,0.50,0.05), "Probability of Political Contribution") + labs(title="Probability of Being a Campaign Donor by Income Level in the 2016 & 2018 Elections",caption="Data: 2016 & 2018 Cooperative Congressional Election Study Voter-Validated Study") + facet_wrap(~year,ncol=2) + theme(panel.spacing = unit(2, "lines"))
###### Figure 13: Waffle Chart of Fictional District ##########
# Waffle Chart of Fictional District
var <- c("49ers","Titans")
nrows <- 20
df <- expand.grid(y = 1:nrows, x = 1:nrows)
categ_table <- round(table(var) * ((nrows*nrows)/(length(var))))
categ_table
df$category <- factor(rep(names(categ_table), categ_table))
ggplot(df, aes(x = x, y = y, fill = category)) + geom_tile(color = "black", size = 0.5) + scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0), trans = 'reverse') + scale_fill_manual("",values = c("gold","blue2")) + labs(title="Fictional Even District of 49ers & Titans", caption="Each Square Represents a Single Voter \n(N = 200 The Beach & 200 Fullerton)") + theme(plot.title = element_text(size = rel(1.2)),axis.text = element_blank(), axis.title = element_blank(), axis.ticks = element_blank(),legend.title = element_blank(), legend.position = "bottom",legend.box.just = "left", legend.key.size = unit(1,"line"), legend.key = element_rect(size = 0, color = 'white'), legend.text.align = 0, legend.box = "horizontal",legend.spacing.x = unit(0.25, 'cm'))
###### Figure 14: Waffle Chart of Non-Bias Turnout ##########
# Even turnout
df$turnout <- sample(0:400, 400, replace=F)
df$turnout <- ifelse(df$turnout <= 200, 1,0)
df$turnout_factor <- factor(df$turnout,levels=c(1,0),labels=c("49ers","Titans"))
ggplot(df, aes(x = x, y = y, fill = turnout_factor)) + geom_tile(color = "black", size = 0.5) + scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0), trans = 'reverse') + scale_fill_manual("",values = c("gold","blue2")) + labs(title="Non-Bias Turnout in Fictional Even District of 49ers & Titans", caption="Each Square Represents a Single Voter \n(N = 200 The Beach & 200 Fullerton voters)") + theme(plot.title = element_text(size = rel(1.2)),axis.text = element_blank(), axis.title = element_blank(), axis.ticks = element_blank(),legend.title = element_blank(), legend.position = "bottom",legend.box.just = "left", legend.key.size = unit(1,"line"), legend.key = element_rect(size = 0, color = 'white'), legend.text.align = 0, legend.box = "horizontal",legend.spacing.x = unit(0.25, 'cm'))
###### Figure 14: Waffle Chart of Bias Turnout ##########
df$bias2 <- sample(0:400, 400, replace=F)
df$bias2 <- ifelse(df$bias2 <= 100,0,1)
df$bias2 <- factor(df$bias2,levels=c(1,0),labels=c("49ers","Titans"))
ggplot(df, aes(x = x, y = y, fill = bias2)) + geom_tile(color = "black", size = 0.5) + scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0), trans = 'reverse') + scale_fill_manual("",values = c("gold","blue2")) + labs(title="Bias Turnout in Fictional Even District of 49ers & Titans", caption="Each Square Represents a Single Voter \n(N = 300 (75%) The Beach & 100 (25%) Titans voters)") + theme(plot.title = element_text(size = rel(1.2)),axis.text = element_blank(), axis.title = element_blank(), axis.ticks = element_blank(),legend.title = element_blank(), legend.position = "bottom",legend.box.just = "left", legend.key.size = unit(1,"line"), legend.key = element_rect(size = 0, color = 'white'), legend.text.align = 0, legend.box = "horizontal",legend.spacing.x = unit(0.25, 'cm'))
###### Figure 15: Model of Madisonian Turnout ##########
madison <- data.frame(district=seq(-1,1,0.01),member=seq(-1,1,0.01))
ggplot(madison,aes(x=district,y=member)) + geom_line(size=2) + scale_x_continuous("District Ideology",limits=c(-1,1),breaks=c(-1,0,1),labels=c("-1 \nConservative","0","1 \nLiberal")) + scale_y_continuous("Representative Ideology",limits=c(-1,1),breaks=c(-1,0,1),labels=c("-1 \nConservative","0","1 \nLiberal")) + ggtitle("Madisonian Model of Congressional Representation")
###### Figure 15 & 16: Congruence Between District & Legislator Ideology ##########
# Legislative Representation
ggplot(senate_spatial_errors_dataset,aes(x=linmap_idealpts_median_voter,y=senator_idealpt_linmap,label=party_code_string,colour=party_code_string)) + geom_text(aes(label=party_code_string),size = 3, alpha = 1, hjust=-0.2, vjust=0) + scale_color_manual("",values=c("blue","red")) + scale_y_continuous("Legislator Ideal Point (Liberal-Conservative)",limits=c(-1,1)) + facet_wrap(~congress) + geom_smooth(method = "loess", se = T, color="black",aes(x=linmap_idealpts_median_voter,y=senator_idealpt_linmap),inherit.aes = F) + theme_bw() + theme(legend.position="none") + scale_x_continuous("State Median Voter Ideal Point (Liberal-Conservative)") + labs(title="Legislative Representation in the U.S. Senate, 2008-2017",caption="Data: Scaled Ideal Points (Algara & Hale 2019)")
ggplot(house_spatial_errors_dataset,aes(x=linmap_idealpts_median_voter,y=mc_idealpt_linmap,label=party_code_string,colour=party_code_string)) + geom_text(aes(label=party_code_string),size = 3, alpha = 1, hjust=-0.2, vjust=0) + scale_color_manual("",values=c("blue","red")) + scale_y_continuous("Legislator Ideal Point (Liberal-Conservative)",limits=c(-1,1)) + facet_wrap(~congress) + geom_smooth(method = "loess", se = T, color="black",aes(x=linmap_idealpts_median_voter,y=mc_idealpt_linmap),inherit.aes = F) + theme_bw() + theme(legend.position="none") + scale_x_continuous("District Median Voter Ideal Point (Liberal-Conservative)") + labs(title="Legislative Representation in the U.S. House, 2008-2017",caption="Data: Scaled Ideal Points (Algara & Hale 2019)")
#install.packages("rmarkdown", type = "source")
library(rmarkdown)
#touch _site.yml #"YML" file that tells your website how to assemble itself
#touch index.Rmd #Create the main rmd file
#touch about.Rmd #Create an about file
setwd("/Users/carlosalgara/Dropbox/Github_Website/calgara.github.io")
rmarkdown::render_site()
#install.packages("rmarkdown", type = "source")
library(rmarkdown)
#touch _site.yml #"YML" file that tells your website how to assemble itself
#touch index.Rmd #Create the main rmd file
#touch about.Rmd #Create an about file
setwd("/Users/carlosalgara/Dropbox/Github_Website/calgara.github.io")
rmarkdown::render_site()
knitr::opts_chunk$set(echo = TRUE)
as_tibble(resources)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2) # Load ggplot2
library(plyr) # Loaad plyr, which provides tools for summarizing data
library(readstata13) # Load readstata13 to read Stata Files
library(dplyr) # Loaad dplyr, which provides tools that I always use, like as_tibble
library(reshape) # Load reshape, which provides for the melt function needed for data manipulation.
load("/Users/carlosalgara/Desktop/carlos_school/PhD_UC Davis/Dissertation Project/Ch2_Electoral_Implications_Approval/Aldrich_McKelvey_Scaling/Aldrich_McKelvey_Scaling_2008_2016_Positions_Results.Rdata") # Load R environment containing various estimations of candidate & citizen ideological ideal points from 2008-2016.
# Let's explore the nature of ideological preferences in the American electorate over time!
print(as_tibble(rescaled_overtime_idealpts_2008_2016))
# Huge data frame of scaled Aldrich-McKelvey ideal points for each CCES respondent from 2008-2016. For more information on the method deriving these scaled ideal points, see Ramey (2016).
# Of course, countless studies suggest that the distribution of ideological preferences of the mass public is unimodal. Let's make a density plot to see if this is the case.
ggplot(data=rescaled_overtime_idealpts_2008_2016,aes(x=idealpt))
# Not so fast my dude. We have to learn to crawl before we run, what happened?
# Now that we have some knowledge and have to specify our density plot aestic, let's get to work & make our plot!
ggplot(data=rescaled_overtime_idealpts_2008_2016,aes(x=idealpt)) + geom_density()
# Success! But there might be evidence that the distribution of ideological preferences might be trimodal. That is, clear partisan cleavages with respect to ideological preferences. Let's explore this possibility by first coding partisan preferences
rescaled_overtime_idealpts_2008_2016$pid3 <- ifelse(rescaled_overtime_idealpts_2008_2016$pid7 %in% c("Lean Republican","Not very strong Republican","Strong Republican"),"Republican",ifelse(rescaled_overtime_idealpts_2008_2016$pid7 %in% c("Lean Democrat","Not very strong Democrat","Strong Democrat"),"Democrat",ifelse(rescaled_overtime_idealpts_2008_2016$pid7 %in% c("Independent"),"Independent",NA)))
print(as_tibble(rescaled_overtime_idealpts_2008_2016)) # Let's check it out
ggplot(data=rescaled_overtime_idealpts_2008_2016,aes(x=idealpt,color=pid3)) + geom_density()
# Urgh, good start but pretty ugly and nowhere close to publication quality. Let's make this prettier by factoring out our pid3 and getting rid of "NA".
rescaled_overtime_idealpts_2008_2016$pid3 <- factor(rescaled_overtime_idealpts_2008_2016$pid3,levels=c("Democrat","Independent","Republican"))
print(str(rescaled_overtime_idealpts_2008_2016$pid3))
# Let's make a really pretty plot showing partisan differences.
ggplot(subset(rescaled_overtime_idealpts_2008_2016,rescaled_overtime_idealpts_2008_2016$pid3 != "Independent"),aes(x=idealpt,fill = pid3))+ geom_density(alpha=.2) + theme_bw() + scale_fill_manual("",values =c("blue","red")) + scale_x_continuous("Aldrich-McKelvey Ideological Placement (Liberal-Conservative)",breaks=c(-4,0,4),limits=c(-4,4),labels=c("-4","0","4")) + scale_y_continuous("Density",expand=c(0,0)) + theme(legend.position=c(0.10, 0.90), legend.box.just = "left", legend.key.size = unit(1,"line"), legend.key = element_rect(size = 0, color = 'white'), legend.text.align = 0, legend.box = "horizontal") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# This is cool, let's do House candidates! First, let's check the data frame.
print(as_tibble(aldmck_congress))
# Oh no, we have to manipulate the dataframe. Urgh, bummer, but easy!
house_candidates <- subset(aldmck_congress,select=c("year","district","placement.dem_hse_libcon_placement","placement.rep_hse_libcon_placement")) # Extract the variables you want
house_candidates <- melt(house_candidates,id=c("year","district")) # Melt the dataframe from wide to long!
print(table(house_candidates$variable)) # We have one variable with a string variable indicating candidate type.
house_candidates$variable <- ifelse(house_candidates$variable == "placement.dem_hse_libcon_placement","Democrat",ifelse(house_candidates$variable == "placement.rep_hse_libcon_placement","Republican",NA))
ggplot(house_candidates, aes(x = value, fill = variable,linetype=variable)) + geom_density(alpha=.2) + theme_minimal() + scale_fill_manual("",values =c("blue","red")) + scale_x_continuous("Candidate Aldrich-McKelvey Ideological Placement (Liberal-Conservative)",limits=c(-1,1),breaks=c(-1,0,1),labels=c("-1","0","1")) + scale_y_continuous("Density",expand=c(0,0)) + theme(legend.position="bottom", legend.box.just = "left", legend.key.size = unit(1,"line"), legend.key = element_rect(size = 0, color = 'white'), legend.text.align = 0, legend.box = "horizontal") + scale_linetype_manual("",values=c("solid","dashed")) + facet_wrap(~year)
# What did we just do?
# We can also assess the validity of our ideal points by looking at the box plot distributions
ggplot(rescaled_overtime_idealpts_2008_2016, aes(x=selfplace, y=idealpts_linear_map_overtime, group=selfplace)) + geom_boxplot(colour = "black",outlier.shape = NA) + scale_y_continuous("Liberal-Conservative Aldrich-McKelvey Ideal Point Estimates",limits=c(-2.5,2.5),breaks=seq(-2,2,1)) + scale_x_continuous("Liberal-Conservative Raw Ideological Self-Placement",breaks=seq(1,7,1)) + scale_fill_discrete(guide=F) + stat_summary(fun.y = mean, geom="point",colour="black", size=2.00, shape= 17) + scale_shape_discrete("") + theme_minimal()
approval <- read.csv("/Users/carlosalgara/Desktop/carlos_school/PhD_UC Davis/Research/Data/American Politics/Presidential_Approval/presidents_survey_marginals_1969_2017.csv")
as_tibble(approval)
ggplot(approval, aes(x = approval_measure)) + geom_histogram(alpha=.2,fill="black",color="black") + theme_minimal() + scale_x_continuous("Presidential Approval Polling") + ggtitle("Distribution of Presidential Approval Polling Data, 1969-2017")
approval$Polling.End <- as.Date(approval$Polling.End)
ggplot(approval,aes(x=Polling.End,y=approval_measure)) + geom_line()
ggplot(subset(approval,approval$president == "Bush"),aes(x=Polling.End,y=approval_measure)) + geom_line() + ggtitle("Presidential Approval during the George W. Bush Administration, 2001-2009")
approval$year_factor <- factor(approval$year,levels=seq(1969,2017,1))
ggplot(subset(approval,approval$president == "Bush"),aes(x=year_factor,y=approval_measure)) + geom_boxplot() + ggtitle("Presidential Approval during the George W. Bush Administration, 2001-2009")
mean_approval <- ddply(approval, .(year), summarize,  approval_mean =mean(approval_measure, na.rm = T))
mean_approval$president <- ifelse(mean_approval$year %in% 1969, "Nixon",ifelse(mean_approval$year %in% 1974, "Ford",ifelse(mean_approval$year %in% 1977, "Carter",ifelse(mean_approval$year %in% 1981, "Reagan",ifelse(mean_approval$year %in% 1989, "Bush 43",ifelse(mean_approval$year %in% 1993, "Clinton",ifelse(mean_approval$year %in% 2001, "W. Bush",ifelse(mean_approval$year %in% 2009, "Obama",ifelse(mean_approval$year %in% 2017, "Trump",NA)))))))))
library(ggrepel) # Package the allows us to use label repels
ggplot(mean_approval,aes(x=year,y=approval_mean,label=president)) + geom_line() + theme_bw() + geom_label_repel(arrow = arrow(length = unit(0.02, 'npc')),segment.size = 0.5, box.padding = 0.5,point.padding = 1, size = 3.5) + ggtitle("Presidential Approval from Nixon to Trump, 1969-2017") + scale_x_continuous("",breaks=seq(1968,2016,4)) + scale_y_continuous("Yearly Presidential Approval Rating")
house <- read.dta13("/Users/carlosalgara/Desktop/carlos_school/PhD_UC Davis/Research/Data/American Politics/Carson_House_Elections/carson_jacobson_house_elex_1900_2016.dta")
house$dv[house$pwin == "Democratic Win" & is.na(house$dv)] <- 100 # Fix missing uncontested election data
house$dv[house$pwin == "Republican Win" & is.na(house$dv)] <- 0 # Fix missing uncontested election data
as_tibble(house)
ggplot(subset(house,house$year %in% 2016),aes(x=dpres,y=dv)) + geom_point(shape=1) + geom_smooth(method='lm',SE=T,color="black") + theme_bw() + scale_x_continuous("District Two-Party Vote Share Won by the Democratic Presidential Candidate") + scale_y_continuous("District Two-Party Vote Share Won \nby the Democratic House Candidate") + ggtitle("Scatterplot of Democratic House Vote-Share by \nDemocratic Presidential Vote-Share in 2016")
house$dem_seat <- ifelse(house$inc == "Dem Incum v. Dem Challenger",1,ifelse(house$inc == "Democratic Incumbent",1,ifelse(house$inc == "Democratic Open Seat",1,ifelse(house$inc == "Two Democrats, open seat",1,0))))
house$dem_seat <- factor(house$dem_seat,levels=c(0,1),labels=c("GOP Seat","Democratic Seat"))
house$district <- paste(house$state,house$cd,sep="")
ggplot(subset(house,house$year %in% 2016),aes(x=dpres,y=dv,color=dem_seat,label=district)) + geom_text(size=2) + geom_smooth(method='lm',SE=T,color="black") + theme_bw() + scale_color_manual("Seat Partisanship",values=c("red","blue")) + scale_x_continuous("District Two-Party Vote Share Won by the Democratic Presidential Candidate",breaks=seq(0,100,10)) + scale_y_continuous("District Two-Party Vote Share Won \nby the Democratic House Candidate",breaks=seq(0,100,10)) + ggtitle("Scatterplot of Democratic House Vote-Share by \nDemocratic Presidential Vote-Share")  + geom_hline(yintercept = 50, colour = gray(1/2), lty = 2) + theme(legend.position="bottom")
ggplot(subset(house,house$year %in% c(1974, 1994,2006,2010)),aes(x=dpres,y=dv,color=dem_seat,label=district)) + geom_point(shape=1) + geom_smooth(method='lm',SE=T,color="black") + theme_minimal() + scale_color_manual("Seat Partisanship",values=c("red","blue")) + scale_x_continuous("District Two-Party Vote Share Won by the Democratic Presidential Candidate",breaks=seq(0,100,10)) + scale_y_continuous("District Two-Party Vote Share Won \nby the Democratic House Candidate",breaks=seq(0,100,25)) + ggtitle("Scatterplot of Democratic House Vote-Share by \nDemocratic Presidential Vote-Share")  + geom_hline(yintercept = 50, colour = gray(1/2), lty = 2) + theme(legend.position="bottom") + facet_wrap(~year,ncol=2) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) # The last part of the code takes out all gridlines.
cces <- read.dta13("/Users/carlosalgara/Dropbox/CCES2016_UCD_original/common/CCES2016.dta",convert.factors = F)
cces <- subset(cces,select=c("CC16_340a","CC16_340d","CC16_340e"))
colnames(cces) <- c("self_placement","hrc_placement","dt_placement")
as_tibble(cces)
cces[cces == 8] <- NA # Recode 8, the missing code, to missing
cces <- na.omit(cces)
sample_means <- ddply(cces, .(self_placement), summarize, hrc_sd = sd(hrc_placement,na.rm=T), dt_sd = sd(dt_placement,na.rm=T),hrc_placement = mean(hrc_placement, na.rm = T), dt_placement = mean(dt_placement, na.rm = T))
z_critical_value <- qnorm(0.975)
x <- data.frame(table(cces$self_placement)) # Retrieve Ns
sample_means$self_placement_n <- x[,2]
sample_means$margin_of_error_hrc <- z_critical_value * (sample_means$hrc_sd / sqrt(sample_means$self_placement_n)) # Get margin of error for HRC
sample_means$margin_of_error_dt <- z_critical_value * (sample_means$dt_sd / sqrt(sample_means$self_placement_n)) # Get margin of error for DT
sample_means$hrc_lower_ci <- sample_means$hrc_placement - sample_means$margin_of_error_hrc
sample_means$hrc_upper_ci <- sample_means$hrc_placement + sample_means$margin_of_error_hrc
sample_means$dt_lower_ci <- sample_means$dt_placement - sample_means$margin_of_error_dt
sample_means$dt_upper_ci <- sample_means$dt_placement + sample_means$margin_of_error_dt
# Let's rework our dataframe to get Trump and Clinton on the same plot
colnames(sample_means)
hrc <- sample_means[,c(1,4,9,10)]
dt <- sample_means[,c(1,5,11,12)]
colnames(hrc) <- c("self_placement","mean","lower","upper")
colnames(dt) <- c("self_placement","mean","lower","upper")
hrc$candidate <- "Hillary Clinton"
dt$candidate <- "Donald Trump"
sample_means <- rbind(hrc,dt)
ggplot(sample_means,aes(x=self_placement,y=mean,ymin=lower,ymax=upper,color=candidate)) + geom_pointrange() + scale_color_manual("2016 Presidential Candidate",values=c("red","blue")) +  theme_minimal() + scale_x_continuous("Respondent Liberal-Conservative Self-Placement",breaks=seq(1,7,1)) + scale_y_continuous("Mean Ideological Placement of Hillary Clinton") + ggtitle("Evaluating Differential Item Function in Citizen Ideological Placement \nof the 2016 Presidential Candidates") + theme(legend.position="bottom")
ggplot(subset(sample_means,sample_means$candidate == "Hillary Clinton"),aes(x=self_placement,y=mean,ymin=lower,ymax=upper)) + geom_pointrange() +  theme_minimal() + scale_x_continuous("Respondent Liberal-Conservative Self-Placement",breaks=seq(1,7,1)) + scale_y_continuous("Mean Ideological Placement of Hillary Clinton") + ggtitle("Evaluating Differential Item Function in Citizen Ideological Placement \nof Hillary Clinton, 2016 CCES")
ggplot(subset(sample_means,sample_means$candidate == "Donald Trump"),aes(x=self_placement,y=mean,ymin=lower,ymax=upper)) + geom_pointrange() +  theme_minimal() + scale_x_continuous("Respondent Liberal-Conservative Self-Placement",breaks=seq(1,7,1)) + scale_y_continuous("Mean Ideological Placement of Donald Trump") + ggtitle("Evaluating Differential Item Function in Citizen Ideological Placement \nof Donald Trump, 2016 CCES")
house$seat_partisanship <- ifelse(house$inc == "GOP Incumbent", "Republican", ifelse(house$inc == "Democratic Incumbent", "Democratic", ifelse(house$inc == "Democratic Open seat", "Democratic", ifelse(house$inc == "GOP Open Seat", "Republican", NA))))
house$dem_incumbency <- ifelse(house$inc == "Democratic Incumbent", 1, ifelse(house$inc == "GOP Incumbent", -1, 0))
house$dem_seat <- ifelse(house$seat_partisanship == "Republican", 0, ifelse(house$seat_partisanship == "Democratic", 1, NA))
house$incumbent_reelex <- ifelse(house$inc == "Democratic Incumbent", 1, ifelse(house$inc == "Dem Open Seat", 0, ifelse(house$inc == "GOP Incumbent", 1, ifelse(house$inc == "GOP Open Seat", 0, ifelse(house$inc == "New Open Seat (reapportioned)", 0, NA)))))
house$dem_qual_advantage_tri <- ifelse(house$seat_partisanship == "Democratic" & house$incumbent_reelex == 1 & house$po1 == "Amateur Challenger", 1, ifelse(house$seat_partisanship == "Republican" & house$incumbent_reelex == 1 & house$po1 == "Amateur Challenger", -1, ifelse(house$seat_partisanship == "Democratic" & house$incumbent_reelex == 1 & house$po1 == "Quality Challenger", 0, ifelse(house$seat_partisanship == "Republican" & house$incumbent_reelex == 1 & house$po1 == "Quality Challenger", 0, ifelse(house$seat_partisanship == "Democratic" & house$incumbent_reelex == 0 & house$po1 == "Amateur Challenger", 1, ifelse(house$seat_partisanship == "Republican" & house$incumbent_reelex == 0 & house$po1 == "Amateur Challenger", -1, ifelse(house$seat_partisanship == "Democratic" & house$incumbent_reelex == 0 & house$po1 == "Quality Challenger", 0, ifelse(house$seat_partisanship == "Republican" & house$incumbent_reelex == 0 & house$po1 == "Quality Challenger", 0, ifelse(house$seat_partisanship == "Democratic" & house$incumbent_reelex == 0 & house$po1 == "Only Democratic Quality Candidate (open)", 1, ifelse(house$seat_partisanship == "Republican" & house$incumbent_reelex == 0 & house$po1 == "Only Democratic Quality Candidate (open)", 1, ifelse(house$seat_partisanship == "Democratic" & house$incumbent_reelex == 0 & house$po1 == "Only GOP Quality Candidate (open)", -1, ifelse(house$seat_partisanship == "Republican" & house$incumbent_reelex == 0 & house$po1 == "Only GOP Quality Candidate (open)", -1, ifelse(house$po1 == "Both Quality Candidates (open)", 0, NA)))))))))))))
house$dv[house$dv == 0] <- NA
house$dv[house$dv == 100] <- NA
house_elexs <- house[,c(1,17,7,15,16,19,21,8)]
house_elexs$dvp[is.na(house_elexs$dvp) & house_elexs$dem_seat == 1] <- 100
house_elexs$dvp[is.na(house_elexs$dvp) & house_elexs$dem_seat == 0] <- 0
as_tibble(house_elexs)
library(margins) # Load Thomas Leeper's Margins Package
summary(model <- glm(dv ~ dem_incumbency + dpres + dem_qual_advantage_tri + dem_seat + dvp, data=house_elexs)) # Estimate our pooled model
mes <- data.frame(summary(margins(model, change="dydx", vcov.=vcovHC(model, "HC3"))))
head(mes)
mes$factor <- ifelse(mes$factor == "dem_incumbency","Incumbency",ifelse(mes$factor == "dem_qual_advantage_tri","Candidate Quality",ifelse(mes$factor == "dem_seat","Seat Partisanship",ifelse(mes$factor == "dpres","District Partisanship",ifelse(mes$factor == "dvp","Previous District Dem Vote-Share",NA)))))
mes$factor <- factor(mes$factor)
ggplot(mes,aes(x=factor,y=AME,ymin=lower,ymax=upper,group=factor,shape=factor)) + theme_minimal() + geom_errorbar(width=0.2,size=1) + geom_point(size=3, fill="white",position= position_dodge(width=1.0)) + scale_x_discrete("") + scale_shape_manual("",values=c(21,21,21,21,21)) + theme(legend.position="none") + coord_flip() + geom_hline(yintercept = 0, colour = gray(1/2), lty = 2) + scale_y_continuous("Average Marginal Effect") + ggtitle("Average Marginal Effect of Model Covarates on House Election Vote Shares")
mes_yearly <- list()
for(i in seq(1900,2016,2)){
x <- subset(house,house$year == i)
model <- glm(dv ~ dem_incumbency + dpres + dem_qual_advantage_tri + dem_seat + dvp, data=x) # Estimate our yearly model
mes <- data.frame(summary(margins(model, change="dydx", vcov.=vcovHC(x, "HC3"))))
mes$election_year <- i
mes_yearly[[i]] <- mes
}
mes_yearly <- ldply(mes_yearly,data.frame) # Unpack the list
head(mes_yearly)
mes_yearly$factor <- ifelse(mes_yearly$factor == "dem_incumbency", "Incumbency Advantage",ifelse(mes_yearly$factor == "dpres", "District Partisanship",mes_yearly$factor))
ggplot(subset(mes_yearly,mes_yearly$factor %in% c("Incumbency Advantage")),aes(x=election_year,y=AME,ymin=lower,ymax=upper)) + geom_pointrange() + theme_minimal() + ggtitle("Effect of Incumbency on House Election Outcomes from 1900-2016") + scale_x_continuous("",breaks=seq(1900,2016,10)) + geom_smooth(method="loess") + geom_hline(yintercept = 0, colour = gray(1/2), lty = 2)
ggplot(subset(mes_yearly,mes_yearly$factor %in% c("District Partisanship")),aes(x=election_year,y=AME,ymin=lower,ymax=upper)) + geom_pointrange() + theme_minimal() + ggtitle("Effect of District Partisanship on House Election Outcomes from 1900-2016") + scale_x_continuous("",breaks=seq(1900,2016,10)) + geom_smooth(method="loess") + geom_hline(yintercept = 0, colour = gray(1/2), lty = 2)
cces <- read.dta13(paste("/Users/carlosalgara/Desktop/carlos_school/PhD_UC Davis/Research/Data/American Politics/CCES/CCES",2014,".dta",sep=""),convert.factors = T, convert.underscore = FALSE, encoding ="UTF-8")
resources <- subset(cces,select=c(weight,cdid,CC401,CC417a_4,faminc,educ))
resources[] <- lapply(resources, as.character)
colnames(resources) <- c("weight","cdid","turnout","contribute","income","education")
resources$turnout[resources$turnout == "I did not vote in the election this November."] <- 0
resources$turnout[resources$turnout == "I thought about voting this time â€“ but didn't."] <- 0
resources$turnout[resources$turnout == "I usually vote, but didn't this time."] <- 0
resources$turnout[resources$turnout == "I attempted to vote but did not or could not."] <- 0
resources$turnout[resources$turnout == "I definitely voted in the Midterm Election on November 4th."] <- 1
resources$contribute[resources$contribute == "No"] <- 0
resources$contribute[resources$contribute == "Yes"] <- 1
library(descr)
na <- data.frame(freq(resources$income,plot=F))
na$category <- rownames(na)
rownames(na) <- NULL
resources$income[resources$income %in% as.character(na[18,4])] <- 0
resources$income[resources$income %in% as.character(na[1,4])] <- 1
resources$income[resources$income %in% as.character(na[6,4])] <- 2
resources$income[resources$income %in% as.character(na[10,4])] <- 3
resources$income[resources$income %in% as.character(na[12,4])] <- 4
resources$income[resources$income %in% as.character(na[13,4])] <- 5
resources$income[resources$income %in% as.character(na[15,4])] <- 6
resources$income[resources$income %in% as.character(na[16,4])] <- 7
resources$income[resources$income %in% as.character(na[17,4])] <- 8
resources$income[resources$income %in% as.character(na[2,4])] <- 9
resources$income[resources$income %in% as.character(na[3,4])] <- 10
resources$income[resources$income %in% as.character(na[4,4])] <- 11
resources$income[resources$income %in% as.character(na[7,4])] <- 12
resources$income[resources$income %in% as.character(na[8,4])] <- 13
resources$income[resources$income %in% as.character(na[11,4])] <- 14
resources$income[resources$income %in% as.character(na[14,4])] <- 15
resources$income[resources$income %in% as.character(na[9,4])] <- 13
resources$income[resources$income %in% as.character(na[5,4])] <- 11
resources$income[resources$income %in% as.character(na[c(19,20),4])] <- NA
resources$education <- factor(resources$education,levels=c("No HS","High school graduate","Some college","2-year","4-year","Post-grad"))
resources$income <- as.numeric(resources$income)
resources$weight <- as.numeric(resources$weight)
resources$turnout <- as.numeric(resources$turnout)
resources$contribute <- as.numeric(resources$contribute)
library(effects)
library(sandwich)
library(lmtest)
library(multiwayvcov)
as_tibble(resources)
# Turnout ~ Education
model <- glm(turnout ~ education, data=resources, weights=weight, family = binomial(link = "logit"))
predict <- data.frame(effect("education", se=TRUE, mod = model, confidence.level = 0.95, xlevels=list(vcov. = cluster.vcov(model, cluster=resources$cdid))))
predict$education <- factor(predict$education,levels=c("No HS","High school graduate","Some college","2-year","4-year","Post-grad"))
ggplot(data= predict, mapping=aes(x=education, y=fit, ymin=lower, ymax=upper, fill=education)) + geom_bar(stat="identity") + geom_errorbar(width=.25) + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + scale_x_discrete("Voter Education Level") + scale_y_continuous(limits=c(0,1.0), breaks=seq(0,1.0,0.05), "Probability of Turning Out to Vote") + ggtitle("Probability of Voter Turnout by Education Level in the 2014 Midterm Elections") + coord_cartesian(ylim=c(0.70,1.0)) + scale_fill_discrete(guide=FALSE)
# Turnout ~ Income
model <- glm(turnout ~ income, data=resources, weights=weight, family = binomial(link = "logit"))
predict <- data.frame(effect("income", se=TRUE, mod = model, confidence.level = 0.95, xlevels=list(income = seq(0,15,1), (vcov. = cluster.vcov(model, cluster=resources$cdid)))))
ggplot(data= predict, mapping=aes(x=income, y=fit)) + geom_line(aes(x = income, y = fit), size = 0.50) + geom_ribbon(aes(ymin=lower, ymax=upper), alpha = .2) + scale_colour_manual("",values="black") + scale_fill_manual("",values="grey12") + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + scale_x_continuous(limits=c(0,15), breaks=c(0,15), labels=c("Less than \n$10,000", "Greater than \n$500,000"), "Voter Income") + scale_y_continuous(limits=c(0.7,1.0), breaks=seq(0.7,1.0,0.05), "Probability of Turning Out to Vote") + ggtitle("Probability of Voter Turnout by Income Level in the 2014 Midterm Elections")
ggplot(data= predict, mapping=aes(x=education, y=fit, ymin=lower, ymax=upper, fill=education)) + geom_bar(stat="identity")
model <- glm(turnout ~ education, data=resources, weights=weight, family = binomial(link = "logit"))
predict <- data.frame(effect("education", se=TRUE, mod = model, confidence.level = 0.95, xlevels=list(vcov. = cluster.vcov(model, cluster=resources$cdid))))
predict$education <- factor(predict$education,levels=c("No HS","High school graduate","Some college","2-year","4-year","Post-grad"))
ggplot(data= predict, mapping=aes(x=education, y=fit, ymin=lower, ymax=upper, fill=education)) + geom_bar(stat="identity")
ggplot(data= predict, mapping=aes(x=education, y=fit, ymin=lower, ymax=upper, fill=education)) + geom_bar()
ggplot(data= predict, mapping=aes(x=education, y=fit, fill=education)) + geom_bar(stat="identity")
ggplot(data= predict, mapping=aes(x=education, y=fit, fill=education)) + geom_bar(stat="identity")
ggplot(data= predict, mapping=aes(x=education, y=fit, fill=education)) + geom_bar(stat="identity") + geom_errorbar(width=.25,ymin=lower,ymax=uper)
colnames(predict)
ggplot(data= predict, mapping=aes(x=education, y=fit, fill=education)) + geom_bar(stat="identity")
ggplot(data= predict, mapping=aes(x=education, y=fit, fill=education)) + geom_bar(stat="identity") + geom_errorbar(width=.25,ymin=lower,ymax=upper)
ggplot(data= predict, mapping=aes(x=education, y=fit, fill=education)) + geom_bar(stat="identity") + geom_errorbar(width=.25,ymin=lower,ymax=upper)
ggplot(data= predict, mapping=aes(x=education, y=fit, ymin=lower,ymax=upper, fill=education)) + geom_bar(stat="identity") + geom_errorbar(width=.25)
ggplot(data= predict, mapping=aes(x=education, y=fit, fill=education)) + geom_bar(stat="identity") + geom_errorbar(width=.25)
ggplot(data= predict, mapping=aes(x=education, y=fit, ymin=lower,ymax=upper, fill=education)) + geom_bar(stat="identity") + geom_errorbar(width=.25)
ggplot(data= predict, mapping=aes(x=education, y=fit, fill=education)) + geom_bar(stat="identity")
ggplot(data= predict, mapping=aes(x=education, y=fit, fill=education)) + geom_bar(stat="identity") + geom_errorbar(data=predict,aes(ymin=lower,ymax=upper),width=.25)
ggplot(data= predict, mapping=aes(x=education, y=fit, fill=education)) + geom_bar(stat="identity") + geom_errorbar(data=predict,aes(ymin=lower,ymax=upper),width=.25) + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + scale_x_discrete("Voter Education Level") + scale_y_continuous(limits=c(0,1.0), breaks=seq(0,1.0,0.05), "Probability of Turning Out to Vote") + ggtitle("Probability of Voter Turnout by Education Level in the 2014 Midterm Elections") + coord_cartesian(ylim=c(0.70,1.0)) + scale_fill_discrete(guide=FALSE)
as_tibble(resources)
# Turnout ~ Education
model <- glm(turnout ~ education, data=resources, weights=weight, family = binomial(link = "logit"))
predict <- data.frame(effect("education", se=TRUE, mod = model, confidence.level = 0.95, xlevels=list(vcov. = cluster.vcov(model, cluster=resources$cdid))))
predict$education <- factor(predict$education,levels=c("No HS","High school graduate","Some college","2-year","4-year","Post-grad"))
ggplot(data= predict, mapping=aes(x=education, y=fit, fill=education)) + geom_bar(stat="identity") + geom_errorbar(data=predict,aes(ymin=lower,ymax=upper),width=.25) + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + scale_x_discrete("Voter Education Level") + scale_y_continuous(limits=c(0,1.0), breaks=seq(0,1.0,0.05), "Probability of Turning Out to Vote") + ggtitle("Probability of Voter Turnout by Education Level in the 2014 Midterm Elections") + coord_cartesian(ylim=c(0.70,1.0)) + scale_fill_discrete(guide=FALSE)
# Turnout ~ Income
model <- glm(turnout ~ income, data=resources, weights=weight, family = binomial(link = "logit"))
predict <- data.frame(effect("income", se=TRUE, mod = model, confidence.level = 0.95, xlevels=list(income = seq(0,15,1), (vcov. = cluster.vcov(model, cluster=resources$cdid)))))
ggplot(data= predict, mapping=aes(x=income, y=fit)) + geom_line(aes(x = income, y = fit), size = 0.50) + geom_ribbon(aes(ymin=lower, ymax=upper), alpha = .2) + scale_colour_manual("",values="black") + scale_fill_manual("",values="grey12") + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + scale_x_continuous(limits=c(0,15), breaks=c(0,15), labels=c("Less than \n$10,000", "Greater than \n$500,000"), "Voter Income") + scale_y_continuous(limits=c(0.7,1.0), breaks=seq(0.7,1.0,0.05), "Probability of Turning Out to Vote") + ggtitle("Probability of Voter Turnout by Income Level in the 2014 Midterm Elections")
resources$education <- factor(resources$education,levels=c("No HS","High school graduate","Some college","2-year","4-year","Post-grad"))
model <- glm(turnout ~ education*income, data=resources, weights=weight, family = binomial(link = "logit"))
predict <- data.frame(effect("education*income", se=TRUE, mod = model, confidence.level = 0.95, xlevels=list(income=unique(resources$income),vcov. = cluster.vcov(model, cluster=resources$cdid))))
head(predict)
predict$education <- factor(predict$education,levels=c("No HS","High school graduate","Some college","2-year","4-year","Post-grad"))
ggplot(predict, aes(x=income, y=fit, group=education,fill=education,linetype=education)) + geom_line(aes(x = income, y = fit), size = 0.50) + geom_ribbon(aes(ymin=lower, ymax=upper), alpha = .2) + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + scale_x_continuous(limits=c(0,15), breaks=c(0,15), labels=c("Less than \n$10,000", "Greater than \n$500,000"), "Voter Income") + scale_y_continuous(limits=c(0.5,1.0), breaks=seq(0.5,1.0,0.05), "Probability of Turning Out to Vote") + ggtitle("Probability of Voter Turnout by Income & Education Level in the 2014 \nMidterm Elections") + theme(legend.position="bottom", legend.box.just = "left", legend.key.size = unit(1,"line"), legend.key = element_rect(size = 0, color = 'white'), legend.text.align = 0, legend.box = "horizontal") + scale_fill_discrete("") + scale_linetype_discrete("")
cces <- read.dta13("/Users/carlosalgara/Dropbox/CCES2016_UCD_original/CCES16_UCDUGA_combined.dta",convert.factors = T, convert.underscore = FALSE, encoding ="UTF-8")
cces_variables <- read.csv("/Users/carlosalgara/Desktop/carlos_school/PhD_UC Davis/Research/Twitter/Butters_NetworkDisagreement.csv",stringsAsFactors = F)
# Subset the data based on the specified variables in the spreadsheet
cces_variables <- cces_variables[,colSums(is.na(cces_variables))<nrow(cces_variables)]
cces_variables <- cces_variables[,-c(1)]
cces_vars_cols <- colnames(cces_variables)
cces_vars <- as.character(cces_variables[1,])
names.use <- names(cces)[(names(cces) %in% cces_vars)]
cces <- cces[, cces_vars]
colnames(cces) <- cces_vars_cols
cces %>% mutate_if(is.factor, as.character) -> cces  #Convert factors to characters
cces %>% mutate_if(is.numeric, as.character) -> cces  #Convert numeric to characters
### Code Variables
###################
# Party ID.
cces$pid7_clean <- cces$pid7
na <- data.frame(freq(cces$pid7_clean,plot=F))
na$values <- rownames(na)
rownames(na) <- NULL
cces$pid7_clean[cces$pid7_clean %in% as.character(na[1,4])] <- "Independent"
cces$pid7_clean[cces$pid7_clean %in% as.character(na[2,4])] <- "Lean Democrat"
cces$pid7_clean[cces$pid7_clean %in% as.character(na[3,4])] <- "Lean Republican"
cces$pid7_clean[cces$pid7_clean %in% as.character(na[4,4])] <- NA
cces$pid7_clean[cces$pid7_clean %in% as.character(na[5,4])] <- "Weak Democrat"
cces$pid7_clean[cces$pid7_clean %in% as.character(na[6,4])] <- "Weak Republican"
cces$pid7_clean[cces$pid7_clean %in% as.character(na[7,4])] <- "Strong Democrat"
cces$pid7_clean[cces$pid7_clean %in% as.character(na[8,4])] <- "Strong Republican"
###################
# Presidential Approval
cces$pres_approve_clean <- cces$pres_approve
na <- data.frame(freq(cces$pres_approve_clean,plot=F))
na$values <- rownames(na)
rownames(na) <- NULL
cces$pres_approve_clean[cces$pres_approve_clean %in% as.character(na[1,3])] <- NA
###################
# Partisanship Recode
cces$pid3_clean <- ifelse(cces$pid7_clean == "Lean Democrat","Democrat", ifelse(cces$pid7_clean == "Weak Democrat", "Democrat", ifelse(cces$pid7_clean == "Strong Democrat", "Democrat", ifelse(cces$pid7_clean == "Lean Republican","Republican", ifelse(cces$pid7_clean == "Weak Republican", "Republican", ifelse(cces$pid7_clean == "Strong Republican", "Republican", ifelse(cces$pid7_clean == "Independent","Independent", NA)))))))
# Network Party 1
cces$network_party1_clean <- cces$network_party1
na <- data.frame(freq(cces$network_party1_clean,plot=F))
na$values <- rownames(na)
rownames(na) <- NULL
cces$network_party1_clean[cces$network_party1_clean %in% as.character(na[1,4])] <- "Bipartisan"
cces$network_party1_clean[cces$network_party1_clean %in% as.character(na[2,4])] <- "Democrats"
cces$network_party1_clean[cces$network_party1_clean %in% as.character(na[3,4])] <- NA
cces$network_party1_clean[cces$network_party1_clean %in% as.character(na[4,4])] <- NA
cces$network_party1_clean[cces$network_party1_clean %in% as.character(na[5,4])] <- "Republicans"
cces$network_party2_clean <- cces$network_party2
na <- data.frame(freq(cces$network_party2_clean,plot=F))
na$values <- rownames(na)
rownames(na) <- NULL
cces$network_party2_clean[cces$network_party2_clean %in% as.character(na[1,4])] <- "Bipartisan"
cces$network_party2_clean[cces$network_party2_clean %in% as.character(na[2,4])] <- "Democrats"
cces$network_party2_clean[cces$network_party2_clean %in% as.character(na[3,4])] <- NA
cces$network_party2_clean[cces$network_party2_clean %in% as.character(na[4,4])] <- NA
cces$network_party2_clean[cces$network_party2_clean %in% as.character(na[5,4])] <- "Republicans"
cces$network_party3_clean <- cces$network_party3
na <- data.frame(freq(cces$network_party3_clean,plot=F))
na$values <- rownames(na)
rownames(na) <- NULL
cces$network_party3_clean[cces$network_party3_clean %in% as.character(na[1,4])] <- "Bipartisan"
cces$network_party3_clean[cces$network_party3_clean %in% as.character(na[2,4])] <- "Democrats"
cces$network_party3_clean[cces$network_party3_clean %in% as.character(na[3,4])] <- NA
cces$network_party3_clean[cces$network_party3_clean %in% as.character(na[4,4])] <- NA
cces$network_party3_clean[cces$network_party3_clean %in% as.character(na[5,4])] <- "Republicans"
# Network Heterogenity
cces$network_party1_dem <- ifelse(cces$network_party1_clean == "Democrats", 1, ifelse(cces$network_party1_clean == "Republicans", -1, ifelse(cces$network_party1_clean == "Bipartisan", 0, NA)))
cces$network_party2_dem <- ifelse(cces$network_party2_clean == "Democrats", 1, ifelse(cces$network_party2_clean == "Republicans", -1, ifelse(cces$network_party2_clean == "Bipartisan", 0, NA)))
cces$network_party3_dem <- ifelse(cces$network_party3_clean == "Democrats", 1, ifelse(cces$network_party3_clean == "Republicans", -1, ifelse(cces$network_party3_clean == "Bipartisan", 0, NA)))
# Create Respondent ID
library(data.table)
cces <- data.table(cces)
cces <- cces[, respondent_id := 1:.N]
network <- cces[,35:38]
rownames(network) <- network$respondent_id
network$respondent_id <- NULL
network$hetero <- rowMeans(network,na.rm=T)
network$hetero_notmissing <- rowMeans(network[,1:3],na.rm=F)
network$hetero[network$hetero == "NaN"] <- NA
network$respondent_id <- rownames(network)
network <- network[,4:6]
network$respondent_id <- as.numeric(network$respondent_id)
cces <- merge(cces,network,by=c("respondent_id"),all=T)
cces$dem_pid3 <- ifelse(cces$pid3_clean == "Democrat",1, ifelse(cces$pid3_clean == "Independent", 0, ifelse(cces$pid3_clean == "Republican", -1, NA)))
cces$pres_approve_dich <- ifelse(cces$pres_approve_clean == "Somewhat approve", 1, ifelse(cces$pres_approve_clean == "Strongly approve", 1, ifelse(cces$pres_approve_clean == "Somewhat disapprove", 0, ifelse(cces$pres_approve_clean == "Strongly disapprove", 0, NA))))
cces$weight <- as.numeric(cces$weight)
cces$pres_approve_clean_factor <- factor(cces$pres_approve_clean,levels=c("Strongly disapprove","Somewhat disapprove","Somewhat approve","Strongly approve"))
library(mlogit)
library(mnlogit)
library(clusterSEs)
#cluster.bs.mlogit(model,data,~chid,ci.level=0.95,cluster.se=F)
cces$constant <- 1
library(nnet)
summary(model <- multinom(pres_approve_clean_factor ~ dem_pid3 + hetero, data=cces, weights=weight, hess=T))
predict <- effect("hetero", se=TRUE, mod = model, confidence.level = 0.95, xlevels=list(hetero=c(-1,-0.6666667,-0.5000000,-0.3333333,0.0000000,0.3333333,0.5000000,0.6666667,1.0000000)))
predict <- data.frame(predict)
# Reshape Probabilities
fit <- predict[,1:5]
lower <- predict[,c(1,18:21)]
upper <- predict[,c(1,22:25)]
colnames(fit) <- c("hetero","fit.Strongly Disapprove","fit.Somewhat Disapprove","fit.Somewhat Approve","fit.Strongly Approve")
fit <- reshape(fit,idvar="hetero",varying=c("fit.Strongly Disapprove","fit.Somewhat Disapprove","fit.Somewhat Approve","fit.Strongly Approve"),se=".",timevar="approval",times=c("Strongly Disapprove","Somewhat Disapprove","Somewhat Approve","Strongly Approve"),direction="long")
colnames(lower) <- c("hetero","lower.Strongly Disapprove","lower.Somewhat Disapprove","lower.Somewhat Approve","lower.Strongly Approve")
lower <- reshape(lower,idvar="hetero",varying=c("lower.Strongly Disapprove","lower.Somewhat Disapprove","lower.Somewhat Approve","lower.Strongly Approve"),se=".",timevar="approval",times=c("Strongly Disapprove","Somewhat Disapprove","Somewhat Approve","Strongly Approve"),direction="long")
colnames(upper) <- c("hetero","upper.Strongly Disapprove","upper.Somewhat Disapprove","upper.Somewhat Approve","upper.Strongly Approve")
upper <- reshape(upper,idvar="hetero",varying=c("upper.Strongly Disapprove","upper.Somewhat Disapprove","upper.Somewhat Approve","upper.Strongly Approve"),se=".",timevar="approval",times=c("Strongly Disapprove","Somewhat Disapprove","Somewhat Approve","Strongly Approve"),direction="long")
predict <- merge(fit,upper,by=c("hetero","approval"))
predict <- merge(predict,lower,by=c("hetero","approval"))
predict$approval <- factor(predict$approval,levels=c("Strongly Disapprove","Somewhat Disapprove","Somewhat Approve","Strongly Approve"))
ggplot(data= predict, mapping=aes(x=hetero, y=fit)) + geom_line(aes(x = hetero, y = fit), size = 0.50) + geom_ribbon(aes(ymin=lower, ymax=upper), alpha = .2) + scale_colour_manual("",values="black") + scale_fill_manual("",values="grey12") + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + scale_x_continuous(limits=c(-1,1), breaks=c(-1,0,1), labels=c("GOP", "Neutral","Dem"), "Partisan Network Homogenity") + scale_y_continuous(limits=c(0,0.70), breaks=seq(0,0.70,0.10), "Predicted Probability of Presidential Approval") + geom_rug(data=cces, aes(x=hetero, y=1),color = "gray30", alpha=.5, size = 0.25, position='jitter') + ggtitle("Probability of Approving of President Obama by Partisan Network Homogenity") + facet_wrap(~approval, ncol = 2, scales = "free_y")
# Load the shapefile that has the data to plot maps in ggplot!
# Let's play around with mapping
# Load the shapefile that has the data to plot maps in ggplot!
library(rgdal)
state_shp <- readOGR("/Users/carlosalgara/Desktop/carlos_school/PhD_UC Davis/Research/Data/American Politics/US House_District_Shape_Files/cb_2016_us_state_20m.shp")
# Let's explore the data embedded in the shape file
as_tibble(state_shp@data) # Dataframe embedded in the Spatial Polygons Data Frame
as_tibble(state_shp@data$NAME) # What type of states are in the file? We don't want territories!
state_shp <- subset(state_shp,state_shp@data$NAME != "Puerto Rico")
state_shp <- subset(state_shp,state_shp@data$NAME != "Alaska")
state_shp <- subset(state_shp,state_shp@data$NAME != "Hawaii")
state_shp <- subset(state_shp,state_shp@data$NAME != "District of Columbia")
# Preliminary look at our map
ggplot(state_shp, aes(x = long, y = lat, group = group)) + geom_polygon(fill = "gray", color = "black") + theme_void() + coord_equal() + coord_fixed(1.3)
state_pres_approval <- read.dta13("/Users/carlosalgara/Desktop/carlos_school/PhD_UC Davis/Dissertation Project/Ch2_Electoral_Implications_Approval/MRP_Estimation/state_presidential_approval_dynamic_mrp_estimates.dta") # Load the data
as_tibble(state_pres_approval) # Get a glimpse of the data structure. These are Dynamic MRP state-level estimates (see: Caughey & Warshaw (2015) for technical details on the Dynamic MRP model) of presidential approval from 2008-2017.
# Explore map making descriptives. Let's make a plot of presidential approval for December 2017.
# Make a percentage
state_pres_approval$state_pres_approval_percent <- state_pres_approval$median * 100
as_tibble(state_pres_approval) # Check to see if it worked. Clearly it did!
approval_2016 <- subset(state_pres_approval,state_pres_approval$year == 2016) # Subet our data
# Let's merge our data onto the map!
approval_2016 <- subset(approval_2016,select=c("state","state_pres_approval_percent"))
state_shp@data$id <- rownames(state_shp@data)
state_shp.points <- fortify(state_shp, region="id")
state_shp.df <- join(state_shp.points, state_shp@data, by="id")
state_shp.df$state <- as.character(state_shp.df$STUSPS)
state_shp.df <- merge(state_shp.df,approval_2016,by=c("state"))
ggplot(state_shp.df, aes(x = long, y = lat, group = group,fill=state_pres_approval_percent),color="white") + geom_polygon(color = "black") + theme_void() + scale_fill_gradient("Presidential Approval",low = 'red', high = 'blue') + ggtitle("Presidential Approval in the U.S. States, 2016")  + coord_equal() + coord_fixed(1.3)
library(network)
library(igraph)
library(ggnet)
idmaker = function(vec){
return(paste(sort(vec), collapse=""))
}
senate <- read.csv(paste("/Users/carlosalgara/Desktop/carlos_school/PhD_UC Davis/Research/Submissions & Applications/Pol_Net_2018/Raw_Network_Legislator_attributes_Data/U.S. Senate/","senate_programmatic_particularistic_",113,"congress_network.csv",sep=""),stringsAsFactors=FALSE, na.strings=c(""," ","NA"))
senate$X <- NULL
co_id <- apply(as.matrix(senate[, c("NameFull_senator_j", "NameFull_senator_i")]), 1, idmaker)
senate <- cbind(senate, co_id)
senate <- senate[!duplicated(senate[,"co_id"]),]
senate_networks <- senate
x <- senate_networks
x$edge <- ifelse(x$number_cosponsored_bills_particularistic >= mean(x$number_cosponsored_bills_particularistic,na.rm=T),1,ifelse(x$number_cosponsored_bills_particularistic < mean(x$number_cosponsored_bills_particularistic,na.rm=T),0,NA))
x <- na.omit(x)
ggnet2(x_ergm, label = "state", color = "grey15", label.color = "color",alpha = 0, size = 0, edge.alpha = 0.5,mode = "kamadakawai",label.size = 3) + ggtitle("113th U.S. Senate Particularistic Cosponsorship Network")
library(network)
library(igraph)
library(ggnet)
as_tibble(x) # This network data is in dyadic form, where each row indicates a pair of Senators.
adj <- graph.data.frame(x[,c(8,21,43)],directed=T) # Let's create a network object! What we want to extract is a dataframe where the first column is Senator i, the second column is Senator J, and the last column is a binary variable indicating
adj <- get.adjacency(adj,attr='edge',sparse=FALSE) # Convert the edge list to an adjacency matrix
x_ergm <- network(adj, matrix.type = "adjacency", ignore.eval = FALSE,directed = F,weighted = F,names.eval="edge") # Convert the adjacency matrix to a network object
# Now let's create some attributes and load them on the network object!
y <- x[,c(8,10,2)]
y1 <- x[,c(21,23,1)]
colnames(y) <- c("NameFull_senator","Party_senator","State_senator")
colnames(y1) <- c("NameFull_senator","Party_senator","State_senator")
party <- rbind(y,y1)
rm(y,y1)
party$Party_senator <- ifelse(party$Party_senator == 200, "R",ifelse(party$Party_senator == 100, "D",NA))
party <- data.table(party)
party <-  party[, duplicates := 1:.N , by = c("NameFull_senator")]
party <- subset(party,party$duplicates == 1)
party <- data.frame(party)
party$duplicates <- NULL
network.vertex.names(x_ergm)
x_ergm%v%'party'<- party$Party_senator # Merge the party attributes for each Senator!
x_ergm%v%'state'<- party$State_senator # Merge the state attributes for each Senator!
x_ergm%v%"color" = ifelse(x_ergm%v%"party" == "R", "red", "blue") # Create color indicators!
ggnet2(x_ergm, label = "state", color = "grey15", label.color = "color",alpha = 0, size = 0, edge.alpha = 0.5,mode = "kamadakawai",label.size = 3) + ggtitle("113th U.S. Senate Particularistic Cosponsorship Network")
ggnet2(x_ergm, label = "vertex.names", color = "grey15", label.color = "color",alpha = 0, size = 0, edge.alpha = 0.5,mode = "kamadakawai",label.size = 3) + ggtitle("113th U.S. Senate Particularistic Cosponsorship Network")
ggnet2(x_ergm, color = "color", alpha = 0.75, size = 4, edge.alpha = 0.5,vjust = -0.6,mode = "kamadakawai") + ggtitle("113th U.S. Senate Particularistic Cosponsorship Network")
map3
library(tigris)
library(leaflet)
library(plyr)
library(dplyr)
library(widgetframe)
library(RColorBrewer)
library(htmlwidgets)
library(htmltools)
load("/Users/carlosalgara/Dropbox/Github_Website/calgara.github.io/Rshinyapp/shiny_data/clean_shiny_data.Rdata")
map3
map3
map3
library(tigris)
library(leaflet)
library(plyr)
library(dplyr)
library(widgetframe)
library(RColorBrewer)
library(htmlwidgets)
library(htmltools)
load("/Users/carlosalgara/Dropbox/Github_Website/calgara.github.io/Rshinyapp/shiny_data/clean_shiny_data.Rdata")
map3
library(tigris)
library(leaflet)
library(plyr)
library(dplyr)
library(widgetframe)
library(RColorBrewer)
library(htmlwidgets)
library(htmltools)
load("/Users/carlosalgara/Dropbox/Github_Website/calgara.github.io/Rshinyapp/shiny_data/clean_shiny_data.Rdata")
map3
#install.packages("rmarkdown", type = "source")
library(rmarkdown)
#touch _site.yml #"YML" file that tells your website how to assemble itself
#touch index.Rmd #Create the main rmd file
#touch about.Rmd #Create an about file
setwd("/Users/carlosalgara/Dropbox/Github_Website/calgara.github.io")
rmarkdown::render_site()
