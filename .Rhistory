pres$natl_dv.1978 <- pres$natl_dv.1976
pres$natl_dv.1982 <- pres$natl_dv.1980
pres$natl_dv.1986 <- pres$natl_dv.1984
pres$natl_dv.1990 <- pres$natl_dv.1988
pres$natl_dv.1994 <- pres$natl_dv.1992
pres$natl_dv.1998 <- pres$natl_dv.1996
pres$natl_dv.2002 <- pres$natl_dv.2000
pres$natl_dv.2006 <- pres$natl_dv.2004
pres$natl_dv.2010 <- pres$natl_dv.2008
pres$natl_dv.2014 <-pres$natl_dv.2012
pres$natl_rv.1914 <- pres$natl_rv.1912
pres$natl_rv.1918 <- pres$natl_rv.1916
pres$natl_rv.1922 <- pres$natl_rv.1920
pres$natl_rv.1926 <- pres$natl_rv.1924
pres$natl_rv.1930 <- pres$natl_rv.1928
pres$natl_rv.1934 <- pres$natl_rv.1932
pres$natl_rv.1938 <- pres$natl_rv.1936
pres$natl_rv.1942 <- pres$natl_rv.1940
pres$natl_rv.1946 <- pres$natl_rv.1944
pres$natl_rv.1950 <- pres$natl_rv.1948
pres$natl_rv.1954 <- pres$natl_rv.1952
pres$natl_rv.1958 <- pres$natl_rv.1956
pres$natl_rv.1962 <- pres$natl_rv.1960
pres$natl_rv.1966 <- pres$natl_rv.1964
pres$natl_rv.1970 <- pres$natl_rv.1968
pres$natl_rv.1974 <- pres$natl_rv.1972
pres$natl_rv.1978 <- pres$natl_rv.1976
pres$natl_rv.1982 <- pres$natl_rv.1980
pres$natl_rv.1986 <- pres$natl_rv.1984
pres$natl_rv.1990 <- pres$natl_rv.1988
pres$natl_rv.1994 <- pres$natl_rv.1992
pres$natl_rv.1998 <- pres$natl_rv.1996
pres$natl_rv.2002 <- pres$natl_rv.2000
pres$natl_rv.2006 <- pres$natl_rv.2004
pres$natl_rv.2010 <- pres$natl_rv.2008
pres$natl_rv.2014 <- pres$natl_rv.2012
pres <- reshape(pres, idvar = "state", direction = "long", varying = names(pres[,c(2:ncol(pres))]), sep= ".", times=seq(1912,2016,2))
rownames(pres) <- NULL
colnames(pres) <- c("state","year","dvote","rvote","natl_dv","natl_rv")
pres <- subset(pres,pres$year > 1912)
pres_election_results <- merge(pres_election_results,pres,by=c("year","state"))
rm(pres)
pres_election_results$dvote_two_party <- (pres_election_results$dvote/(pres_election_results$dvote + pres_election_results$rvote)) * 100
pres_election_results$rvote_two_party <- (pres_election_results$rvote/(pres_election_results$dvote + pres_election_results$rvote)) * 100
pres_election_results$dvote_natl_two_party <- (pres_election_results$natl_dv/(pres_election_results$natl_dv + pres_election_results$natl_rv)) * 100
pres_election_results$rvote_natl_two_party <- (pres_election_results$natl_rv/(pres_election_results$natl_dv + pres_election_results$natl_rv)) * 100
pres_election_results$dvote_rel_natl_two_party <- pres_election_results$dvote_two_party - pres_election_results$dvote_natl_two_party
pres_election_results$rvote_rel_natl_two_party <- pres_election_results$rvote_two_party - pres_election_results$rvote_natl_two_party
pres_election_results$relative_natl_dem_state_partisanship <- pres_election_results$relative_natl_dem_state_partisanship * 100
#########
# The main independent variables of the analysis will be the state partisanship variable, the incumbency variable, and the quality differential. The first coding will be the state partisanship variable. This coding will be the two-party vote-share during the previous three presidential elections. See Highton 2000 for this coding justification, it controls for short-term swings in state preferences (i.e. 1964/1972/1984) and it is better than deviations from the national popular vote, such as the Cook Partisan index.
senate$lagged_dem_partisanship <- as.numeric(senate$lagged_dem_partisanship)
senate$lagged_rep_partisanship <- as.numeric(senate$lagged_rep_partisanship)
senate$dem_state_partisanship <- (senate$lagged_dem_partisanship)/(senate$lagged_dem_partisanship + senate$lagged_rep_partisanship)
# Presidential vote-share in the last election
senate$d_presvote <- as.numeric(senate$d_presvote)
senate$r_presvote <- as.numeric(senate$r_presvote)
senate$d_presvote_twoparty <- (senate$d_presvote/(senate$d_presvote + senate$r_presvote))
# Fix the missing cases
senate$d_presvote_twoparty[which(senate$electionidentifier == "1923 MN")] <- senate$d_presvote_twoparty[which(senate$electionidentifier == "1924 MN")]
senate$d_presvote_twoparty[which(senate$electionidentifier == "1923 VT")] <- senate$d_presvote_twoparty[which(senate$electionidentifier == "1922 VT")]
senate$d_presvote_twoparty[which(senate$electionidentifier == "1925 WI")] <- senate$d_presvote_twoparty[which(senate$electionidentifier == "1926 WI")]
senate$d_presvote_twoparty[which(senate$electionidentifier == "1933 VA")] <- senate$d_presvote_twoparty[which(senate$electionidentifier == "1934 VA")]
senate$d_presvote_twoparty[which(senate$electionidentifier == "1937 AR")] <- senate$d_presvote_twoparty[which(senate$electionidentifier == "1938 AR")]
senate$d_presvote_twoparty[which(senate$electionidentifier == "1941 MS")] <- senate$d_presvote_twoparty[which(senate$electionidentifier == "1942 MS")]
senate$d_presvote_twoparty[which(senate$electionidentifier == "1941 SC")] <- senate$d_presvote_twoparty[which(senate$electionidentifier == "1942 SC")]
senate$d_presvote_twoparty[which(senate$electionidentifier == "1941 TX")] <- senate$d_presvote_twoparty[which(senate$electionidentifier == "1942 TX")]
senate$d_presvote_twoparty[which(senate$electionidentifier == "1947 MS")] <- senate$d_presvote_twoparty[which(senate$electionidentifier == "1948 MS")]
senate$d_presvote_twoparty[which(senate$electionidentifier == "1949 NY")] <- senate$d_presvote_twoparty[which(senate$electionidentifier == "1950 NY")]
senate$d_presvote_twoparty[which(senate$electionidentifier == "1957 TX")] <- senate$d_presvote_twoparty[which(senate$electionidentifier == "1958 TX")]
senate$d_presvote_twoparty[which(senate$electionidentifier == "1957 WI")] <- senate$d_presvote_twoparty[which(senate$electionidentifier == "1958 WI")]
senate$d_presvote_twoparty[which(senate$electionidentifier == "1961 TX")] <- senate$d_presvote_twoparty[which(senate$electionidentifier == "1960 TX")]
senate$d_presvote_twoparty[which(senate$electionidentifier == "1975 NH")] <- senate$d_presvote_twoparty[which(senate$electionidentifier == "1974 NH")]
senate$d_presvote_twoparty[which(senate$electionidentifier == "1983 WA")] <- senate$d_presvote_twoparty[which(senate$electionidentifier == "1982 WA")]
senate$d_presvote_twoparty[which(senate$electionidentifier == "1991 PA")] <- senate$d_presvote_twoparty[which(senate$electionidentifier == "1992 PA")]
senate$d_presvote_twoparty[which(senate$electionidentifier == "1993 TX")] <- senate$d_presvote_twoparty[which(senate$electionidentifier == "1994 TX")]
senate$d_presvote_twoparty[which(senate$electionidentifier == "2013 MA")] <- senate$d_presvote_twoparty[which(senate$electionidentifier == "2014 MA")]
senate$d_presvote_twoparty[which(senate$electionidentifier == "2013 NJ")] <- senate$d_presvote_twoparty[which(senate$electionidentifier == "2014 NJ")]
# Mix the variable for special Senate elections that fall in odd numbers (excludes first cycle in AZ and first couple of cycles in AK/HI)
missing <- subset(senate,is.na(senate$dem_state_partisanship))
senate$dem_state_partisanship[which(senate$electionidentifier == "1923 MN")] <- senate$dem_state_partisanship[which(senate$electionidentifier == "1924 MN")]
senate$dem_state_partisanship[which(senate$electionidentifier == "1923 VT")] <- senate$dem_state_partisanship[which(senate$electionidentifier == "1922 VT")]
senate$dem_state_partisanship[which(senate$electionidentifier == "1925 WI")] <- senate$dem_state_partisanship[which(senate$electionidentifier == "1926 WI")]
senate$dem_state_partisanship[which(senate$electionidentifier == "1933 VA")] <- senate$dem_state_partisanship[which(senate$electionidentifier == "1934 VA")]
senate$dem_state_partisanship[which(senate$electionidentifier == "1937 AR")] <- senate$dem_state_partisanship[which(senate$electionidentifier == "1938 AR")]
senate$dem_state_partisanship[which(senate$electionidentifier == "1941 MS")] <- senate$dem_state_partisanship[which(senate$electionidentifier == "1942 MS")]
senate$dem_state_partisanship[which(senate$electionidentifier == "1941 SC")] <- senate$dem_state_partisanship[which(senate$electionidentifier == "1942 SC")]
senate$dem_state_partisanship[which(senate$electionidentifier == "1941 TX")] <- senate$dem_state_partisanship[which(senate$electionidentifier == "1942 TX")]
senate$dem_state_partisanship[which(senate$electionidentifier == "1947 MS")] <- senate$dem_state_partisanship[which(senate$electionidentifier == "1948 MS")]
senate$dem_state_partisanship[which(senate$electionidentifier == "1949 NY")] <- senate$dem_state_partisanship[which(senate$electionidentifier == "1950 NY")]
senate$dem_state_partisanship[which(senate$electionidentifier == "1957 TX")] <- senate$dem_state_partisanship[which(senate$electionidentifier == "1958 TX")]
senate$dem_state_partisanship[which(senate$electionidentifier == "1957 WI")] <- senate$dem_state_partisanship[which(senate$electionidentifier == "1958 WI")]
senate$dem_state_partisanship[which(senate$electionidentifier == "1961 TX")] <- senate$dem_state_partisanship[which(senate$electionidentifier == "1960 TX")]
senate$dem_state_partisanship[which(senate$electionidentifier == "1975 NH")] <- senate$dem_state_partisanship[which(senate$electionidentifier == "1974 NH")]
senate$dem_state_partisanship[which(senate$electionidentifier == "1983 WA")] <- senate$dem_state_partisanship[which(senate$electionidentifier == "1982 WA")]
senate$dem_state_partisanship[which(senate$electionidentifier == "1991 PA")] <- senate$dem_state_partisanship[which(senate$electionidentifier == "1992 PA")]
senate$dem_state_partisanship[which(senate$electionidentifier == "1993 TX")] <- senate$dem_state_partisanship[which(senate$electionidentifier == "1994 TX")]
senate$dem_state_partisanship[which(senate$electionidentifier == "2013 MA")] <- senate$dem_state_partisanship[which(senate$electionidentifier == "2014 MA")]
senate$dem_state_partisanship[which(senate$electionidentifier == "2013 NJ")] <- senate$dem_state_partisanship[which(senate$electionidentifier == "2014 NJ")]
senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1923 MN")] <- senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1924 MN")]
senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1923 VT")] <- senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1922 VT")]
senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1925 WI")] <- senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1926 WI")]
senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1933 VA")] <- senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1934 VA")]
senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1937 AR")] <- senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1938 AR")]
senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1941 MS")] <- senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1942 MS")]
senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1941 SC")] <- senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1942 SC")]
senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1941 TX")] <- senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1942 TX")]
senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1947 MS")] <- senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1948 MS")]
senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1949 NY")] <- senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1950 NY")]
senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1957 TX")] <- senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1958 TX")]
senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1957 WI")] <- senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1958 WI")]
senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1961 TX")] <- senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1960 TX")]
senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1975 NH")] <- senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1974 NH")]
senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1983 WA")] <- senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1982 WA")]
senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1991 PA")] <- senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1992 PA")]
senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1993 TX")] <- senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "1994 TX")]
senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "2013 MA")] <- senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "2014 MA")]
senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "2013 NJ")] <- senate$relative_natl_dem_state_partisanship[which(senate$electionidentifier == "2014 NJ")]
rm(missing)
senate$inc_state_partisanship <- ifelse(senate$seat_partisanship == "Democratic", senate$dem_state_partisanship, ifelse(senate$seat_partisanship == "Republican", (1-senate$dem_state_partisanship), NA))
senate$relative_natl_inc_state_partisanship <- ifelse(senate$seat_partisanship == "Democratic", senate$relative_natl_dem_state_partisanship, ifelse(senate$seat_partisanship == "Republican", (1-senate$relative_natl_dem_state_partisanship), NA))
senate$inc_presvote_twoparty <- ifelse(senate$seat_partisanship == "Democratic", senate$d_presvote_twoparty, ifelse(senate$seat_partisanship == "Republican", (1-senate$d_presvote_twoparty), NA))
# Fix the missing data for the odd year specials.
senate$inc_state_partisanship <- ifelse(senate$electionidentifier == "1983 WA", 1 - senate$dem_state_partisanship[senate$electionidentifier == "1982 WA"], ifelse(senate$electionidentifier == "1993 TX", senate$dem_state_partisanship[senate$electionidentifier == "1994 TX"], ifelse(senate$electionidentifier == "1991 PA", senate$dem_state_partisanship[senate$electionidentifier == "1992 PA"], ifelse(senate$electionidentifier == "1933 VA", senate$dem_state_partisanship[senate$electionidentifier == "1934 VA"], ifelse(senate$electionidentifier == "1941 MS", senate$dem_state_partisanship[senate$electionidentifier == "1942 MS"], ifelse(senate$electionidentifier == "1941 SC", senate$dem_state_partisanship[senate$electionidentifier == "1942 SC"], ifelse(senate$electionidentifier == "1949 NY", 1 - senate$dem_state_partisanship[senate$electionidentifier == "1950 NY"], ifelse(senate$electionidentifier == "1957 TX", senate$dem_state_partisanship[senate$electionidentifier == "1958 TX"], ifelse(senate$electionidentifier == "1961 TX", senate$dem_state_partisanship[senate$electionidentifier == "1960 TX"], ifelse(senate$electionidentifier == "1975 NH", 1 - senate$dem_state_partisanship[senate$electionidentifier == "1974 NH"], ifelse(senate$electionidentifier == "2013 MA", senate$dem_state_partisanship[senate$electionidentifier == "2014 MA"], ifelse(senate$electionidentifier == "2013 NJ", 1 - senate$dem_state_partisanship[senate$electionidentifier == "2014 NJ"], senate$inc_state_partisanship))))))))))))
senate$inc_presvote_twoparty <- ifelse(senate$electionidentifier == "1983 WA", 1 - senate$d_presvote_twoparty[senate$electionidentifier == "1982 WA"], ifelse(senate$electionidentifier == "1993 TX", senate$d_presvote_twoparty[senate$electionidentifier == "1994 TX"], ifelse(senate$electionidentifier == "1991 PA", senate$d_presvote_twoparty[senate$electionidentifier == "1992 PA"], ifelse(senate$electionidentifier == "1933 VA", senate$d_presvote_twoparty[senate$electionidentifier == "1934 VA"], ifelse(senate$electionidentifier == "1941 MS", senate$d_presvote_twoparty[senate$electionidentifier == "1942 MS"], ifelse(senate$electionidentifier == "1941 SC", senate$d_presvote_twoparty[senate$electionidentifier == "1942 SC"], ifelse(senate$electionidentifier == "1949 NY", 1 - senate$d_presvote_twoparty[senate$electionidentifier == "1950 NY"], ifelse(senate$electionidentifier == "1957 TX", senate$d_presvote_twoparty[senate$electionidentifier == "1958 TX"], ifelse(senate$electionidentifier == "1961 TX", senate$d_presvote_twoparty[senate$electionidentifier == "1960 TX"], ifelse(senate$electionidentifier == "1975 NH", 1 - senate$d_presvote_twoparty[senate$electionidentifier == "1974 NH"], ifelse(senate$electionidentifier == "2013 MA", senate$d_presvote_twoparty[senate$electionidentifier == "2014 MA"], ifelse(senate$electionidentifier == "2013 NJ", 1 - senate$d_presvote_twoparty[senate$electionidentifier == "2014 NJ"], senate$inc_presvote_twoparty))))))))))))
senate$inc_presvote_twoparty <- senate$inc_presvote_twoparty - 0.50
senate$relative_natl_inc_state_partisanship <- ifelse(senate$electionidentifier == "1983 WA", 1 - senate$relative_natl_dem_state_partisanship[senate$electionidentifier == "1982 WA"], ifelse(senate$electionidentifier == "1993 TX", senate$relative_natl_dem_state_partisanship[senate$electionidentifier == "1994 TX"], ifelse(senate$electionidentifier == "1991 PA", senate$relative_natl_dem_state_partisanship[senate$electionidentifier == "1992 PA"], ifelse(senate$electionidentifier == "1933 VA", senate$relative_natl_dem_state_partisanship[senate$electionidentifier == "1934 VA"], ifelse(senate$electionidentifier == "1941 MS", senate$relative_natl_dem_state_partisanship[senate$electionidentifier == "1942 MS"], ifelse(senate$electionidentifier == "1941 SC", senate$relative_natl_dem_state_partisanship[senate$electionidentifier == "1942 SC"], ifelse(senate$electionidentifier == "1949 NY", 1 - senate$relative_natl_dem_state_partisanship[senate$electionidentifier == "1950 NY"], ifelse(senate$electionidentifier == "1957 TX", senate$relative_natl_dem_state_partisanship[senate$electionidentifier == "1958 TX"], ifelse(senate$electionidentifier == "1961 TX", senate$relative_natl_dem_state_partisanship[senate$electionidentifier == "1960 TX"], ifelse(senate$electionidentifier == "1975 NH", 1 - senate$relative_natl_dem_state_partisanship[senate$electionidentifier == "1974 NH"], ifelse(senate$electionidentifier == "2013 MA", senate$relative_natl_dem_state_partisanship[senate$electionidentifier == "2014 MA"], ifelse(senate$electionidentifier == "2013 NJ", 1 - senate$relative_natl_dem_state_partisanship[senate$electionidentifier == "2014 NJ"], senate$relative_natl_inc_state_partisanship))))))))))))
# Second main explanatory variabel of interest: incumbency. This variable will be coded using the Cox & Katz (1996), Gelman & King (1990), and Highton (2000) method. Democratic incumbents are coded 1, open seats coded 0, and Republican incumbents coded -1. Appointed Senators are treated as incumbents (the analysis will also be run to exclude these Senators as a robustness check). The only seats not coded are those in which an Independent Senator sought re-election (VA's Byrd & NE's Norris) or a 3rd Party Senator sought re-election as a third-party Senator (1928,1934 FL MN Sen. Henrik Shipstead, ran and won in 1940 as a Republican and the race is ) & La Follete Jr. in (1940 WI-SEN).
senate$dem_incumbency <- ifelse(senate$seat_status == "3rd Party Open seat", 0, ifelse(senate$seat_status == "Appointed Democratic Senator Election", 1, ifelse(senate$seat_status == "Appointed Republican Senator Election", -1, ifelse(senate$seat_status == "Democratic open seat", 0 , ifelse(senate$seat_status == "Democratic Senator re-election", 1, ifelse(senate$seat_status == "Democratic Vacant seat", 0 , ifelse(senate$seat_status == "Independent Open seat", 0 , ifelse(senate$seat_status == "New Senate seat (AK/HI)", 0, ifelse(senate$seat_status == "Republican open seat", 0, ifelse(senate$seat_status == "Republican Senator re-election", -1, ifelse(senate$seat_status == "Republican Vacant seat", 0 , NA)))))))))))
crosstab(senate$seat_status,senate$dem_incumbency)
senate$incumbent_reelex <- ifelse(senate$seat_status == "3rd Party Open seat", 0, ifelse(senate$seat_status == "3rd Party Senator Re-election", 1, ifelse(senate$seat_status == "Appointed Democratic Senator Election", 1, ifelse(senate$seat_status == "Appointed Republican Senator Election", 1, ifelse(senate$seat_status == "Democratic open seat", 0, ifelse(senate$seat_status == "Independent Open seat", 0, ifelse(senate$seat_status == "Independent Senator Re-election", 1, ifelse(senate$seat_status == "Republican open seat", 0, ifelse(senate$seat_status == "Democratic Senator re-election", 1, ifelse(senate$seat_status == "Republican Senator re-election", 1, ifelse(senate$seat_status == "Republican Vacant seat", 0, ifelse(senate$seat_status == "Democratic Vacant seat",0, ifelse(senate$seat_status == "New Senate seat (AK/HI)",0, NA)))))))))))))
# Third main explanatory variable of interest: the quality differential. This variable will be coded 1 if the Democratic candidate has a quality advantage, 0 if there is no quality advantage for the Republican, and -1 if the Republican as a quality advantage. A "quality" challenger will be defined as a candidate that has held/or is holding the office of U.S. Senate, Governorship, U.S. House, or lesser statewide office (such as state treasurer, attorney general, Lt. Gov, etc.). Local officials and state legislators are not counted as "quality candidates in the first coding."
senate$dem_quality_number <- ifelse(senate$dem_quality == "Amateur", 0, ifelse(senate$dem_quality == "Fmr. U.S. Senator", 6, ifelse(senate$dem_quality == "Governor", 5, ifelse(senate$dem_quality == "Lesser Statewide Office", 3, ifelse(senate$dem_quality == "Local Official", 1, ifelse(senate$dem_quality == "State Legislator", 2, ifelse(senate$dem_quality == "U.S. House Rep", 4, ifelse(senate$dem_quality == "U.S. Senator", 6, NA))))))))
senate$dem_quality_number_dich <- ifelse(senate$dem_quality == "Amateur", 0, ifelse(senate$dem_quality == "Fmr. U.S. Senator", 1, ifelse(senate$dem_quality == "Governor", 1, ifelse(senate$dem_quality == "Lesser Statewide Office", 1, ifelse(senate$dem_quality == "Local Official", 0, ifelse(senate$dem_quality == "State Legislator", 0, ifelse(senate$dem_quality == "U.S. House Rep", 1, ifelse(senate$dem_quality == "U.S. Senator", 1, NA))))))))
senate$rep_quality_number <- ifelse(senate$rep_quality == "Amateur", 0, ifelse(senate$rep_quality == "Fmr. U.S. Senator", 6, ifelse(senate$rep_quality == "Governor", 5, ifelse(senate$rep_quality == "Lesser Statewide Office", 3, ifelse(senate$rep_quality == "Local Official", 1, ifelse(senate$rep_quality == "State Legislator", 2, ifelse(senate$rep_quality == "U.S. House Rep", 4, ifelse(senate$rep_quality == "U.S. Senator", 6, NA))))))))
senate$rep_quality_number_dich <- ifelse(senate$rep_quality == "Amateur", 0, ifelse(senate$rep_quality == "Fmr. U.S. Senator", 1, ifelse(senate$rep_quality == "Governor", 1, ifelse(senate$rep_quality == "Lesser Statewide Office", 1, ifelse(senate$rep_quality == "Local Official", 0, ifelse(senate$rep_quality == "State Legislator", 0, ifelse(senate$rep_quality == "U.S. House Rep", 1, ifelse(senate$rep_quality == "U.S. Senator", 1, NA))))))))
# This measure imposes the coding of +1,0,-1 for the Democratic quality advantage.
senate$dem_qual_advantage_tri <- ifelse(senate$dem_quality_number_dich > senate$rep_quality_number_dich, 1, ifelse(senate$dem_quality_number_dich == senate$rep_quality_number_dich, 0, ifelse(senate$dem_quality_number_dich < senate$rep_quality_number_dich, -1, NA)))
# The second coding of challenger quality continous and based on Lublin's initial scale (0-6). The Democratic advantage will be conditioned by the difference in offices. For example, the Democratic advantage between a U.S. Senator and an Amateur is 6, U.S. House member 2, Governor 1, and so on.
senate$dem_qual_advantage_cont <- senate$dem_quality_number - senate$rep_quality_number
# Incumbent direction
senate$inc_quality_advantage_dich_tri <- ifelse(senate$seat_partisanship == "Democratic" & senate$dem_quality_number_dich > senate$rep_quality_number_dich, 1, ifelse(senate$seat_partisanship == "Democratic" & senate$dem_quality_number_dich < senate$rep_quality_number_dich, -1, ifelse(senate$seat_partisanship == "Republican" & senate$dem_quality_number_dich > senate$rep_quality_number_dich, -1, ifelse(senate$seat_partisanship == "Republican" & senate$dem_quality_number_dich < senate$rep_quality_number_dich, 1, ifelse(senate$dem_quality_number_dich == senate$rep_quality_number_dich, 0, NA)))))
senate$inc_quality_advantage_cont <- ifelse(senate$seat_partisanship == "Democratic", senate$dem_quality_number - senate$rep_quality_number, ifelse(senate$seat_partisanship == "Republican", senate$rep_quality_number - senate$dem_quality_number, ifelse(senate$dem_quality_number == senate$rep_quality_number, 0, NA)))
# Investigate the coding of the quality indicators
quality <- subset(senate, select=c("electionidentifier", "seat_class","seat_status","dem_quality","rep_quality","dem_quality_number","dem_quality_number_dich","rep_quality_number","rep_quality_number_dich","dem_qual_advantage_tri","dem_qual_advantage_cont","inc_quality_advantage_dich_tri","inc_quality_advantage_cont"))
# Initial control variables to be specified: lagged Democratic two-party Senate vote, incumbency, and southern region.
# Lagged Democratic Senate vote is already in the dataset (this was constructed in the master do file), it must be constructed to. This variable is the two-party Democratic senate voteshare in the last Senate election for this seat.
senate$lagged_dv <- as.numeric(senate$lagged_dv)
senate$lagged_rv <- as.numeric(senate$lagged_rv)
senate$lagged_seatclass_dem_vote <- (senate$lagged_dv)/(senate$lagged_dv + senate$lagged_rv)
senate$lagged_seatclass_inc_twoparty_vote <- ifelse(senate$seat_partisanship == "Democratic",senate$lagged_seatclass_dem_vote, ifelse(senate$seat_partisanship == "Republican", (1 - senate$lagged_seatclass_dem_vote), NA))
# Seat partisanship: Coded 1 for Democratic Seat, 0 for Republican Seat. Vacant seats with partisanship indicators will take (8 GOP & 5 Democratic) will be coded in the direction of the party that last held the seat. 3rd Party, Independent Seats, and the initially vacant HI/AK seats are coded as missing, given they are not controlled by the two-major partys.
senate$dem_seat <- ifelse(senate$seat_status == "Appointed Democratic Senator Election", 1, ifelse(senate$seat_status == "Appointed Republican Senator Election", 0, ifelse(senate$seat_status == "Democratic open seat", 1, ifelse(senate$seat_status == "Democratic Senator re-election", 1, ifelse(senate$seat_status == "Democratic Vacant seat", 1 , ifelse(senate$seat_status == "Republican open seat", 0, ifelse(senate$seat_status == "Republican Senator re-election", 0, ifelse(senate$seat_status == "Republican Vacant seat", 0 , NA))))))))
# An essential control variable for southern state will be specified. These are the former 11 confederate states of: VA, TN, AR, LA, MS, AL, GA, SC, NC, FL, TX.
senate$south <- 0
senate$south[which(senate$state %in% c("VA","TN","AR","LA","MS","AL","GA","SC","NC","FL","TX"))] <- 1
# Control for lagged Democratic quality & Incumbent party quality advantage for that state. This is for the last Senate election in the state rather than the last Senate election for that seat in the state.
library(DataCombine)
quality_lagg <- senate[order(senate$state,senate$year),]
quality_lagg <- subset(quality_lagg,select=c("year","state","seat_class","electionidentifier","multiplesenate_elections","dem_vote","inc_twoparty_vote","dem_incumbency","incumbent_reelex","dem_qual_advantage_tri","inc_quality_advantage_dich_tri","dem_qual_advantage_cont","inc_quality_advantage_cont","unopposed_race","dem_seat"))
quality_lagg <- data.frame(quality_lagg)
quality_lagg$dem_vote <- ifelse(quality_lagg$dem_seat == 1 & quality_lagg$unopposed_race == 1 & is.na(quality_lagg$dem_vote), 1, ifelse(quality_lagg$dem_seat == 0 & quality_lagg$unopposed_race == 1 & is.na(quality_lagg$dem_vote), 0, quality_lagg$dem_vote))
quality_lagg$inc_twoparty_vote <- ifelse(quality_lagg$unopposed_race == 1 & is.na(quality_lagg$inc_twoparty_vote), 1, quality_lagg$inc_twoparty_vote)
quality_lagg <- slide(quality_lagg, Var = "dem_vote", GroupVar =c("state"), slideBy = -1)
quality_lagg <- slide(quality_lagg, Var = "inc_twoparty_vote", GroupVar =c("state"), slideBy = -1)
quality_lagg <- slide(quality_lagg, Var = "dem_incumbency", GroupVar =c("state"), slideBy = -1)
quality_lagg <- slide(quality_lagg, Var = "incumbent_reelex", GroupVar =c("state"), slideBy = -1)
quality_lagg <- slide(quality_lagg, Var = "dem_qual_advantage_tri", GroupVar =c("state"), slideBy = -1)
quality_lagg <- slide(quality_lagg, Var = "inc_quality_advantage_dich_tri", GroupVar =c("state"), slideBy = -1)
quality_lagg <- slide(quality_lagg, Var = "dem_qual_advantage_cont", GroupVar =c("state"), slideBy = -1)
quality_lagg <- slide(quality_lagg, Var = "inc_quality_advantage_cont", GroupVar =c("state"), slideBy = -1)
quality_lagg <- slide(quality_lagg, Var = "unopposed_race", GroupVar =c("state"), slideBy = -1)
quality_lagg <- slide(quality_lagg, Var = "dem_seat", GroupVar =c("state"), slideBy = -1)
names(quality_lagg)[names(quality_lagg) == 'dem_vote-1'] <- 'lagged_dem_vote'
names(quality_lagg)[names(quality_lagg) == 'inc_twoparty_vote-1'] <- 'lagged_inc_twoparty_vote'
names(quality_lagg)[names(quality_lagg) == 'dem_incumbency-1'] <- 'lagged_dem_incumbency'
names(quality_lagg)[names(quality_lagg) == 'incumbent_reelex-1'] <- 'lagged_incumbent_reelex'
names(quality_lagg)[names(quality_lagg) == 'dem_qual_advantage_tri-1'] <- 'lagged_dem_qual_advantage_tri'
names(quality_lagg)[names(quality_lagg) == 'dem_qual_advantage_cont-1'] <- 'lagged_dem_qual_advantage_cont'
names(quality_lagg)[names(quality_lagg) == 'inc_quality_advantage_dich_tri-1'] <- 'lagged_inc_quality_advantage_tri'
names(quality_lagg)[names(quality_lagg) == 'inc_quality_advantage_cont-1'] <- 'lagged_inc_quality_advantage_cont'
names(quality_lagg)[names(quality_lagg) == 'unopposed_race-1'] <- 'lagged_unopposed_race'
names(quality_lagg)[names(quality_lagg) == 'dem_seat-1'] <- 'lagged_dem_seat'
quality_lagg <- subset(quality_lagg,select=c("electionidentifier","multiplesenate_elections","lagged_dem_vote","lagged_inc_twoparty_vote","lagged_dem_incumbency","lagged_incumbent_reelex","lagged_dem_qual_advantage_tri","lagged_inc_quality_advantage_tri","lagged_dem_qual_advantage_cont","lagged_inc_quality_advantage_cont","lagged_unopposed_race","lagged_dem_seat"))
senate <- merge(senate,quality_lagg,by=c("electionidentifier","multiplesenate_elections"))
# Lagged variables for the specific seat-class
quality_lagg2 <- senate[order(senate$state,senate$seat_class,senate$year),]
quality_lagg2 <- subset(quality_lagg2,select=c("year","state","seat_class","electionidentifier","multiplesenate_elections","dem_vote","inc_twoparty_vote","dem_incumbency","incumbent_reelex","dem_qual_advantage_tri","inc_quality_advantage_dich_tri","dem_qual_advantage_cont","inc_quality_advantage_cont","unopposed_race","dem_seat"))
quality_lagg2 <- data.frame(quality_lagg2)
quality_lagg2$dem_vote <- ifelse(quality_lagg2$dem_seat == 1 & quality_lagg2$unopposed_race == 1 & is.na(quality_lagg2$dem_vote), 1, ifelse(quality_lagg2$dem_seat == 0 & quality_lagg2$unopposed_race == 1 & is.na(quality_lagg2$dem_vote), 0, quality_lagg2$dem_vote))
quality_lagg2$inc_twoparty_vote <- ifelse(quality_lagg2$unopposed_race == 1 & is.na(quality_lagg2$inc_twoparty_vote), 1, quality_lagg2$inc_twoparty_vote)
quality_lagg2 <- slide(quality_lagg2, Var = "dem_vote", GroupVar =c("state", "seat_class"), slideBy = -1)
quality_lagg2 <- slide(quality_lagg2, Var = "inc_twoparty_vote", GroupVar =c("state", "seat_class"), slideBy = -1)
quality_lagg2 <- slide(quality_lagg2, Var = "dem_incumbency", GroupVar =c("state", "seat_class"), slideBy = -1)
quality_lagg2 <- slide(quality_lagg2, Var = "incumbent_reelex", GroupVar =c("state", "seat_class"), slideBy = -1)
quality_lagg2 <- slide(quality_lagg2, Var = "dem_qual_advantage_tri", GroupVar =c("state", "seat_class"), slideBy = -1)
quality_lagg2 <- slide(quality_lagg2, Var = "inc_quality_advantage_dich_tri", GroupVar =c("state", "seat_class"), slideBy = -1)
quality_lagg2 <- slide(quality_lagg2, Var = "dem_qual_advantage_cont", GroupVar =c("state", "seat_class"), slideBy = -1)
quality_lagg2 <- slide(quality_lagg2, Var = "inc_quality_advantage_cont", GroupVar =c("state", "seat_class"), slideBy = -1)
quality_lagg2 <- slide(quality_lagg2, Var = "unopposed_race", GroupVar =c("state", "seat_class"), slideBy = -1)
quality_lagg2 <- slide(quality_lagg2, Var = "dem_seat", GroupVar =c("state", "seat_class"), slideBy = -1)
names(quality_lagg2)[names(quality_lagg2) == 'dem_vote-1'] <- 'class_lagged_dem_vote'
names(quality_lagg2)[names(quality_lagg2) == 'inc_twoparty_vote-1'] <- 'class_lagged_inc_twoparty_vote'
names(quality_lagg2)[names(quality_lagg2) == 'dem_incumbency-1'] <- 'class_lagged_dem_incumbency'
names(quality_lagg2)[names(quality_lagg2) == 'incumbent_reelex-1'] <- 'class_lagged_incumbent_reelex'
names(quality_lagg2)[names(quality_lagg2) == 'dem_qual_advantage_tri-1'] <- 'class_lagged_dem_qual_advantage_tri'
names(quality_lagg2)[names(quality_lagg2) == 'dem_qual_advantage_cont-1'] <- 'class_lagged_dem_qual_advantage_cont'
names(quality_lagg2)[names(quality_lagg2) == 'inc_quality_advantage_dich_tri-1'] <- 'class_lagged_inc_quality_advantage_tri'
names(quality_lagg2)[names(quality_lagg2) == 'inc_quality_advantage_cont-1'] <- 'class_lagged_inc_quality_advantage_cont'
names(quality_lagg2)[names(quality_lagg2) == 'unopposed_race-1'] <- 'class_lagged_unopposed_race'
names(quality_lagg2)[names(quality_lagg2) == 'dem_seat-1'] <- 'class_lagged_dem_seat'
quality_lagg2 <- subset(quality_lagg2,select=c("electionidentifier","multiplesenate_elections","class_lagged_dem_vote","class_lagged_inc_twoparty_vote","class_lagged_dem_incumbency","class_lagged_incumbent_reelex","class_lagged_dem_qual_advantage_tri","class_lagged_inc_quality_advantage_tri","class_lagged_dem_qual_advantage_cont","class_lagged_inc_quality_advantage_cont","class_lagged_unopposed_race","class_lagged_dem_seat"))
senate <- merge(senate,quality_lagg2,by=c("electionidentifier","multiplesenate_elections"))
quality_lagg <- merge(quality_lagg,quality_lagg2,by=c("electionidentifier","multiplesenate_elections"))
rm(quality_lagg2)
# Presidential/Midterm election cycle
senate$pres_election <- ifelse(senate$year %in% seq(1912,2016,4), 1, 0)
senate$dem_president <- ifelse(senate$year %in% seq(1912,1920,1), 1, ifelse(senate$year %in% seq(1933,1952,1), 1, ifelse(senate$year %in% seq(1961,1968,1), 1, ifelse(senate$year %in% seq(1977,1980,1), 1, ifelse(senate$year %in% seq(1993,2000,1), 1, ifelse(senate$year %in% seq(2009,2016,1), 1, 0))))))
senate$dem_midterm_election <- ifelse(senate$pres_election == 0 & senate$dem_president == 1, -1, ifelse(senate$pres_election == 0 & senate$dem_president == 0, 1, ifelse(senate$pres_election == 1, 0, NA)))
senate$incpty_midterm_election <- ifelse(senate$pres_election == 0 & senate$dem_president == 1 & senate$dem_seat == 1, -1, ifelse(senate$pres_election == 0 & senate$dem_president == 0 & senate$dem_seat == 0, -1, ifelse(senate$pres_election == 0 & senate$dem_president == 0 & senate$dem_seat == 1, 1, ifelse(senate$pres_election == 0 & senate$dem_president == 1 & senate$dem_seat == 0, 1, ifelse(senate$pres_election == 1, 0, NA)))))
######################################################################################################
######################################################################################################
# Merge with polarization
f <- "ftp://k7moa.com/wf1/Weekly_DW-NOMINATE_31_12.DTA"
d <- read.dta13(f, convert.factors = F)
ds <- subset(d,d$cd==0 & d$cong >= 62 & d$state!=99)
library(RCurl)
library(XML)
# download html
html <- getURL("http://k7moa.com/state_codes_icpsr.htm", followlocation = TRUE)
# parse html
doc <- htmlParse(html, asText=TRUE)
plain.text <- xpathSApply(doc, "//text()[not(ancestor::script)][not(ancestor::style)][not(ancestor::noscript)][not(ancestor::form)]", xmlValue)
state_code <- data.frame(capture.output(cat(paste(plain.text, collapse = "\n"))))
colnames(state_code) <- c("x")
state_code$state <- substr(state_code$x,1,2)
state_code$state_abbrev <- substr(state_code$x,4,5)
state_code <- state_code[8:57,2:3]
rownames(state_code) <- NULL
state_code$state <- as.numeric(state_code$state)
ds <- merge(ds,state_code,by=c("state"))
ds$state <- ds$state_abbrev
ds$state_abbrev <- NULL
ds$party <- ifelse(ds$party == 100, "D", ifelse(ds$party == 200, "R", ifelse(ds$party == 112, "R", ifelse(ds$party == 328, "D", NA))))
ds <- subset(ds,!is.na(ds$party))
senate_medians <- ddply(ds, .(cong,party), summarize,  party_ideo_mean=mean(dwnom1, na.rm = T), party_ideo_median=median(dwnom1, na.rm = T), party_ideo_quantile0=quantile(dwnom1, probs = 0, na.rm = T), party_ideo_quantile1=quantile(dwnom1, probs = 0.25, na.rm = T), party_ideo_quantile3=quantile(dwnom1, probs = 0.75, na.rm = T), party_ideo_quantile4=quantile(dwnom1, probs = 1, na.rm = T))
senate_medians <- subset(senate_medians, !is.na(senate_medians$party))
rm(f,d)
senate_medians$counter <- senate_medians$cong - 61
for (cong in 62:114) {
senate_medians$year <- 1910 + senate_medians$counter + senate_medians$counter
}
senate_medians$counter <- NULL
senate_medians <- subset(senate_medians,select=c("cong","year","party","party_ideo_mean","party_ideo_median"))
senate_medians <- reshape(senate_medians, idvar = c("cong","year"), v.names = c("party_ideo_mean","party_ideo_median"), timevar = c("party"), direction = "wide")
senate_medians$mean_polarization <- abs(senate_medians$party_ideo_mean.D - senate_medians$party_ideo_mean.R)
senate_medians$median_polarization <- abs(senate_medians$party_ideo_median.D - senate_medians$party_ideo_median.R)
senate_medians <- senate_medians[order(senate_medians$cong),]
senate_medians <- data.frame(senate_medians)
senate_medians <- slide(senate_medians, Var = "mean_polarization", slideBy = -1)
names(senate_medians)[names(senate_medians) == 'mean_polarization-1'] <- 'lagged_mean_polarization'
senate_medians <- slide(senate_medians, Var = "median_polarization", slideBy = -1)
names(senate_medians)[names(senate_medians) == 'median_polarization-1'] <- 'lagged_median_polarization'
senate_medians <- subset(senate_medians,senate_medians$year >= 1914)
plot <- ggplot(senate_medians, aes(x=year, y=mean_polarization)) + geom_point(shape = 1, color = "black", size = 2) + theme_bw() + scale_x_continuous(limits=c(1914,2016), breaks=seq(1914,2016,6), "") + scale_y_continuous(limits=c(0.45,0.85), breaks=c(0.45,0.50,0.55,0.60,0.65,0.70,0.75,0.80,0.85), "Senate Mean Ideological Polarization") + theme(legend.title = element_blank()) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + stat_smooth(method = "loess", se=FALSE, size = 0.75, color="black")
#geom_line
grid.newpage()
footnote <- "Polarization defined as absolute difference between Democratic & Republican 1st dim. DW-NOMINATE means."
g <- arrangeGrob(plot, bottom = textGrob(footnote, x = 0.015, y = 1, hjust = 0, vjust= 0, gp = gpar(fontface = "italic", fontsize = 9, col = "black")))
grid.draw(g)
##ggsave(file="direct_elect_polarization.png", g, width = 6.82, height = 5, units = "in")
for (year in 1914:2016) {
senate$counter <- (senate$year - 1914)/2
}
senate$counter <- ifelse(senate$counter == 4.5, 5, ifelse(senate$counter== 5.5,6, ifelse(senate$counter== 9.5,10, ifelse(senate$counte == 11.5,12,ifelse(senate$counter == 13.5, 14, ifelse(senate$counter == 16.5,17, ifelse(senate$counter == 17.5,18, ifelse(senate$counter == 21.5,22, ifelse(senate$counter == 22.5, 23, ifelse(senate$counter == 23.5, 24, ifelse(senate$counter == 30.5, 31, ifelse(senate$counter == 34.5, 35, ifelse(senate$counter == 38.5, 39, ifelse(senate$counter == 39.5, 40, ifelse(senate$counter == 49.5, 50, senate$counter)))))))))))))))
senate$counter <- factor(senate$counter,labels=seq(1914,2016,2))
senate_medians$counter <- senate_medians$year
senate_medians$year <- NULL
senate <- merge(senate,senate_medians,by=c("counter"))
# Section I B) Extraction of relevant cases
# Extract the relevant cases for analysis.
#The Senate elections of interest are from the first cycle in which Senators are able to seek re-election that were directly elected (1920) to 2016. In other words, Senators were seeking election for the first time in 1914,1916 & 1918 (given that they were elected by the legislature prior to the passage of the 17th Amendment in most states) and Senators seeking re-election in 1920 are the cohort to seek re-election having been initialy elected by votes.
#The Senate races of interest are those that are opposed by both major parties and, congruent with Highton (2000), races in which "Elections in which a third party or independent candidate received more than 15 per cent of the popular vote" are not included in the analysis. Three dataframes capture the cases excluded from analysis and the dataframe "contested_senate" include the cases that are used for analysis (TOTAL N: 1728-174 = 1554)
contested_senate <- senate
total_excluded_races <- subset(contested_senate, contested_senate$unopposed_race == 1 | contested_senate$major_thirdpartyrace == 1)
unopposed_races <- subset(contested_senate, contested_senate$unopposed_race == 1)
major_third_party_races  <- subset(contested_senate, contested_senate$major_thirdpartyrace == 1 & contested_senate$unopposed_race == 0)
contested_senate <- subset(contested_senate, contested_senate$unopposed_race == 0)
contested_senate <- subset(contested_senate, contested_senate$major_thirdpartyrace == 0)
# Highton Analysis
library(dplyr)
library(broom)
# Zero-center state partisanship &  Democratic Two-Party Senate vote
spc <- subset(pres_election_results,select=c(year,state,dem_state_partisanship))
colnames(spc) <- c("counter","state","dem_state_partisanship_twoyear")
contested_senate <- merge(contested_senate,spc,by=c("counter","state"))
contested_senate$dem_spc <- ((contested_senate$dem_state_partisanship*100) - 50)
contested_senate$dem_state_partisanship_twoyear <- contested_senate$dem_state_partisanship_twoyear - 50
contested_senate$dem_vote <- (contested_senate$dem_vote) * 100
# Original Highton Analysis
#non_south <- subset(contested_senate,contested_senate$year %in% seq(1914,2016,2))
fitted_models_vce <- contested_senate %>% group_by(counter) %>% do(model = coeftest(glm(dem_vote ~ dem_incumbency + dem_state_partisanship_twoyear, data=.), vcov = vcovHC(glm(dem_vote ~ dem_incumbency + dem_spc, data=.), "HC3")))
senate_timeseries <- rowwise(fitted_models_vce) %>% tidy(model)
# Respecified for Candidate Quality
fitted_models_vce <- contested_senate %>% group_by(counter) %>% do(model = glm(dem_vote ~ dem_incumbency + dem_spc + dem_qual_advantage_tri + dem_seat, data=.))
senate_timeseries <- rowwise(fitted_models_vce) %>% tidy(model)
fitted_models_vce <- contested_senate %>% group_by(counter) %>% do(model = coeftest(glm(dem_vote ~ dem_incumbency + dem_spc + dem_qual_advantage_tri, data=.), vcov = vcovHC(glm(dem_vote ~ dem_incumbency + dem_spc + dem_qual_advantage_tri, data=.), "HC3")))
senate_timeseries <- rowwise(fitted_models_vce) %>% tidy(model)
# Predictions
model <- glm(dem_vote ~ dem_incumbency + dem_spc + dem_qual_advantage_tri, data= contested_senate)
df <- subset(contested_senate,select=c("electionidentifier","counter","state", "dem_name","rep_name","seat_status", "dem_vote","dem_incumbency","dem_spc","dem_qual_advantage_tri","dem_seat"))
linear_predictions <- list()
for(i in seq(1914,2016,2)){
df <- subset(contested_senate, contested_senate$counter == i, select=c("electionidentifier","counter","state", "dem_name","rep_name","seat_status", "dem_vote","dem_incumbency","dem_spc","dem_qual_advantage_tri","dem_seat"))
model <- glm(dem_vote ~ dem_incumbency + dem_spc + dem_qual_advantage_tri, data= df)
linear_prediction <- predict.glm(model,newdata=df,type="response")
df <- cbind(df,linear_prediction)
df <- data.frame(df)
linear_predictions[[i]] <- df
}
df <- ldply(linear_predictions, data.frame)
# Merge with covariates
covariates <- subset(senate_timeseries,select=c("counter","term","estimate"))
covariates <- data.frame(covariates)
covariates$counter <- as.numeric(as.character(covariates$counter))
library(reshape2)
covariates$term <- ifelse(covariates$term == "(Intercept)", "tide",ifelse(covariates$term == "dem_incumbency","incumbency",ifelse(covariates$term == "dem_qual_advantage_tri","candqual",ifelse(covariates$term == "dem_spc","spc",NA))))
covariates <- reshape(covariates, idvar = c("counter"),v.names=c("estimate"),timevar=c("term"),direction="wide")
covariates$tide <- covariates$estimate.tide - 50
df <- merge(df,covariates,by=c("counter"))
df$label <- paste(df$counter," ","\n",df$state,sep="")
df$dem_seat_factor <- ifelse(df$dem_seat == 1, "Democratic Seat", ifelse(df$dem_seat == 0, "GOP Seat", NA))
ggplot(df,aes(x=dem_vote,y=linear_prediction,colour=dem_seat_factor,label=label)) + geom_text(size = 2.5, alpha = 3/5) + scale_shape_manual(values = party_label) + scale_colour_manual("",values=c("blue","red"),guide=F) + scale_x_continuous(limits=c(0,100)) + scale_y_continuous(limits=c(0,100))
# Incorrect Predictions
df$correct_prediction <- ifelse(df$linear_prediction >= 50 & df$dem_vote >= 50, 1, ifelse(df$linear_prediction >= 50 & df$dem_vote < 50, 0, ifelse(df$linear_prediction < 50 & df$dem_vote < 50, 1, ifelse(df$linear_prediction < 50 & df$dem_vote >= 50, 0, NA))))
ggplot(subset(df,df$correct_prediction == 0),aes(x=dem_vote,y=linear_prediction,colour=dem_seat_factor,label=label)) + geom_text(size = 2.5, alpha = 3/5) + scale_shape_manual(values = party_label) + scale_colour_manual("",values=c("blue","red"),guide=F)
# Prediction & actual gains/losses by year
df$predict_dem_win <- ifelse(df$linear_prediction >= 50, 1, ifelse(df$linear_prediction < 50, 0, NA))
df$actual_dem_win <- ifelse(df$dem_vote >= 50, 1, ifelse(df$dem_vote < 50, 0, NA))
df$tide_linear_prediction <- ifelse(df$tide < 0, df$linear_prediction + df$tide, ifelse(df$tide >= 0, df$linear_prediction - df$tide, NA))
df$tide_linear_prediction_win <- ifelse(df$tide_linear_prediction >= 50, 1, ifelse(df$tide_linear_prediction < 50, 0, NA))
x <- na.omit(df)
outcomes <- ddply(x, .(counter), summarize, tide=mean(tide),dem_seats_up = sum(dem_seat), dem_obs_wins = sum(actual_dem_win), predict_dem_win = sum(predict_dem_win),tide_linear_prediction_win=sum(tide_linear_prediction_win))
# Stuff
df$dem_margin <- df$dem_vote - 50
df$tide_larger_than_margin <- ifelse(df$dem_margin > 0 & df$tide > df$dem_margin, 1, NA)
View(df)
df$tide_larger_than_margin <- ifelse(df$dem_margin > 0 & df$tide > df$dem_margin, 1, ifelse(df$dem_margin < 0 & df$tide > df$dem_margin, 1, NA))
table(df$tide_larger_than_margin)
df$tide_larger_than_margin <- ifelse(df$dem_margin > 0 & df$tide > df$dem_margin, 1, ifelse(df$dem_margin < 0 & df$tide < df$dem_margin, 1, NA))
table(df$tide_larger_than_margin)
x <- subset(df,df$tide_larger_than_margin==1)
View(x)
View(senate_timeseries)
cor(contested_senate$dem_state_partisanship,contested_senate$dem_state_partisanship_twoyear,use="complete.obs")
hist(contested_senate$dem_state_partisanship_twoyear)
fitted_models_vce <- contested_senate %>% group_by(counter) %>% do(model = coeftest(glm(dem_vote ~ dem_incumbency + dem_state_partisanship_twoyear, data=.), vcov = vcovHC(glm(dem_vote ~ dem_incumbency + dem_spc, data=.), "HC3")))
senate_timeseries <- rowwise(fitted_models_vce) %>% tidy(model)
View(senate_timeseries)
fitted_models_vce <- contested_senate %>% group_by(counter) %>% do(model = coeftest(glm(dem_vote ~ dem_incumbency + dem_state_partisanship_twoyear + dem_qual_advantage_tri, data=.), vcov = vcovHC(glm(dem_vote ~ dem_incumbency + dem_state_partisanship_twoyear + dem_qual_advantage_tri, data=.), "HC3")))
senate_timeseries <- rowwise(fitted_models_vce) %>% tidy(model)
View(fitted_models_vce)
fitted_models_vce <- contested_senate %>% group_by(counter) %>% do(model = coeftest(glm(dem_vote ~ dem_incumbency + dem_state_partisanship_twoyear + dem_qual_advantage_tri, data=.), vcov = vcovHC(glm(dem_vote ~ dem_incumbency + dem_state_partisanship_twoyear + dem_qual_advantage_tri, data=.), "HC3")))
senate_timeseries <- rowwise(fitted_models_vce) %>% tidy(model)
View(senate_timeseries)
fitted_models_vce <- contested_senate %>% group_by(counter) %>% do(model = coeftest(glm(dem_vote ~ dem_incumbency + dem_spc, data=.), vcov = vcovHC(glm(dem_vote ~ dem_incumbency + dem_spc, data=.), "HC3")))
senate_timeseries <- rowwise(fitted_models_vce) %>% tidy(model)
View(senate_timeseries)
View(outcomes)
ggplot(outcomes,aes(x=counter,y=tide)) + geom_line()
ggplot(outcomes,aes(x=counter,y=tide)) + geom_point()
freq(df$correct_prediction)
freq(df$correct_prediction)
fitted_models_vce <- contested_senate %>% group_by(counter) %>% do(model = coeftest(glm(dem_vote ~ dem_incumbency + dem_spc + dem_qual_advantage_tri, data=.), vcov = vcovHC(glm(dem_vote ~ dem_incumbency + dem_spc + dem_qual_advantage_tri, data=.), "HC3")))
senate_timeseries <- rowwise(fitted_models_vce) %>% glance(model)
fitted_models_vce <- contested_senate %>% group_by(counter) %>% do(model = coeftest(glm(dem_vote ~ dem_incumbency + dem_spc + dem_qual_advantage_tri, data=.), vcov = vcovHC(glm(dem_vote ~ dem_incumbency + dem_spc + dem_qual_advantage_tri, data=.), "HC3")))
senate_timeseries <- rowwise(fitted_models_vce) %>% tidy(model)
fitted_models_vce <- contested_senate %>% group_by(counter) %>% do(model = glm(dem_vote ~ dem_incumbency + dem_spc + dem_qual_advantage_tri, data=.))
senate_timeseries_glance <- rowwise(fitted_models_vce) %>% glance(model)
View(senate_timeseries_glance)
fitted_models_vce <- contested_senate %>% group_by(counter) %>% do(model = lm(dem_vote ~ dem_incumbency + dem_spc + dem_qual_advantage_tri, data=.))
senate_timeseries_glance <- rowwise(fitted_models_vce) %>% glance(model)
View(senate_timeseries_glance)
summarise(senate_timeseries_glance$r.squared)
summary(senate_timeseries_glance$r.squared)
fitted_models_vce <- contested_senate %>% group_by(counter) %>% do(model = lm(dem_vote ~ dem_incumbency + dem_spc, data=.))
senate_timeseries_glance <- rowwise(fitted_models_vce) %>% glance(model)
summary(senate_timeseries_glance$r.squared)
fitted_models_vce <- contested_senate %>% group_by(counter) %>% do(model = lm(dem_vote ~ dem_incumbency + dem_spc + dem_qual_advantage_tri, data=.))
senate_timeseries_glance <- rowwise(fitted_models_vce) %>% glance(model)
View(senate_timeseries)
table(df$correct_prediction)
freq(df$correct_prediction)
summary(senate_timeseries_glance$adj.r.squared)
summary(senate_timeseries_glance$r.squared)
View(senate_timeseries_glance)
59*(.18)
library(foreign)
library(MASS)
library(UsingR)
library(nlme)
library(Zelig)
library(lmtest)
library(sandwich)
library(car)
library(directlabels)
library(bbmle)
library(maxLik)
library(ggplot2)
library(RGraphics)
library(lattice)
library(latticeExtra)
library(VGAM)
library(mvtnorm)
library(ordinal)
library(nnet)
library(sampleSelection)
library(pscl)
library(lmtest)
library(aod)
library(scales)
library(gridExtra)
library(reshape2)
library(network)
library(Matrix)
library(igraph)
library(gmodels)
library(pastecs)
library(dplyr)
library(plyr)
library(arm)
library(coefplot)
library(psych)
library(descr)
library(data.table)
library(multiwayvcov)
library(compositions)
library(rms)
library(effects)
library(readstata13)
house_attributes <- read.dta13("/Users/carlosalgara/Desktop/carlos_school/PhD_UC Davis/Prospectus/Prospectus_Ch2_Analysis/house_ideo_unity_attributes.dta")
senate_attributes <- read.dta13("/Users/carlosalgara/Desktop/carlos_school/PhD_UC Davis/Prospectus/Prospectus_Ch2_Analysis/senate_ideo_unity_attributes.dta")
house_attributes$dem_house <- ifelse(house_attributes$year %in% seq(1974,1994,2), 1, ifelse(house_attributes$year %in% seq(2008,2010,2), 1, 0))
senate_attributes$dem_senate <- ifelse(senate_attributes$year %in% seq(1974,1980,1), 1, ifelse(senate_attributes$year %in% seq(1988,1994,2), 1, ifelse(senate_attributes$year %in% seq(2001,2002,1),1, ifelse(senate_attributes$year %in% seq(2008,2014,1), 1, 0))))
# Acquire mean party unity & mean party ideology
# Recall that the theory is the distance from the majority meadian, derive the median ideological placement by Congress. Use W-NOMINATE.
house_mean_imputed <- ddply(house_attributes,.(year,party_code_string),summarize, median_ideo_alpha = mean(alpha_nom_1D, na.rm=T),  median_ideo_wnom = mean(coord1D, na.rm=T), median_unity = mean(member_unity, na.rm=T))
house_mean_imputed <- reshape(house_mean_imputed, idvar = c("year"), v.names = colnames(house_mean_imputed[,2:ncol(house_mean_imputed)]), timevar = "party_code_string", direction = "wide")
house_mean_imputed$party_code_string.D <- NULL
house_mean_imputed$party_code_string.R <- NULL
senate_mean_imputed <- ddply(senate_attributes,.(year,party_code_string),summarize, median_ideo_alpha = mean(alpha_nom_1D, na.rm=T),  median_ideo_wnom = mean(coord1D, na.rm=T), median_unity = mean(member_unity, na.rm=T))
senate_mean_imputed <- reshape(senate_mean_imputed, idvar = c("year"), v.names = colnames(senate_mean_imputed[,2:ncol(senate_mean_imputed)]), timevar = "party_code_string", direction = "wide")
senate_mean_imputed$party_code_string.D <- NULL
senate_mean_imputed$party_code_string.R <- NULL
# Merge with the House & Senate frames
house_attributes <- merge(house_attributes,house_mean_imputed,by=c("year"))
senate_attributes <- merge(senate_attributes,senate_mean_imputed,by=c("year"))
# Histograms
#####################
# Directional Distance
senate_attributes$dim1 <- as.numeric(senate_attributes$dim1)
senate_attributes$party_code_string <- factor(senate_attributes$party_code_string,levels=c("R","D"),labels=c("Republican Conference","Democratic Caucus"))
myColors <- c("dodgerblue1","red1")
names(myColors) <- levels(senate_attributes$party_code_string)
colScale <- scale_colour_manual("",values = myColors, guide = FALSE)
plot <-  ggplot(senate_attributes, aes(x = dim1, fill = party_code_string)) + geom_density(alpha=.2) + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), strip.background = element_blank()) + colScale + scale_x_continuous(limits=c(-1,1), breaks=c(-1,0,1), labels=c("L","0","C"), "Ideological Placement (Liberal-Conservative)") + scale_y_continuous("Density") + facet_wrap(~congress, ncol = 5, scales = "free_y")  + guides(fill = guide_legend(reverse=T)) + theme(legend.position=c(0.50, 0.075), legend.box.just = "left", legend.key.size = unit(1,"line"), legend.key = element_rect(size = 0, color = 'white'), legend.text.align = 0, legend.box = "horizontal", legend.text=element_text(size=10)) + labs(fill="Congressional Parties") + ggtitle("Distribution of U.S. Senators by Ideological Placement by Congress, 1974-2016")
house_attributes$dim1 <- as.numeric(house_attributes$dim1)
house_attributes$party_code_string <- factor(house_attributes$party_code_string,levels=c("R","D"),labels=c("Republican Conference","Democratic Caucus"))
myColors <- c("dodgerblue1","red1")
names(myColors) <- levels(house_attributes$party_code_string)
colScale <- scale_colour_manual("",values = myColors, guide = FALSE)
plot <-  ggplot(house_attributes, aes(x = dim1, fill = party_code_string)) + geom_density(alpha=.2) + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), strip.background = element_blank()) + colScale + scale_x_continuous(limits=c(-1,1), breaks=c(-1,0,1), labels=c("L","0","C"), "Ideological Placement (Liberal-Conservative)") + scale_y_continuous("Density") + facet_wrap(~congress, ncol = 5, scales = "free_y")  + guides(fill = guide_legend(reverse=T)) + theme(legend.position=c(0.50, 0.075), legend.box.just = "left", legend.key.size = unit(1,"line"), legend.key = element_rect(size = 0, color = 'white'), legend.text.align = 0, legend.box = "horizontal", legend.text=element_text(size=10)) + labs(fill="Congressional Parties") + ggtitle("Distribution of U.S. Representatives by Ideological Placement by Congress, 1974-2016")
rm(list=ls(all=TRUE))
nes <- read.dta13("/Users/carlosalgara/Desktop/carlos_school/PhD_UC Davis/Research/Data/American Politics/ANES_Cumulative_File/anes_timeseries_cdf_stata12.dta")
#install.packages("rmarkdown", type = "source")
library(rmarkdown)
#touch _site.yml #"YML" file that tells your website how to assemble itself
#touch index.Rmd #Create the main rmd file
#touch about.Rmd #Create an about file
setwd("/Users/carlosalgara/Dropbox/Github_Website/calgara.github.io")
rmarkdown::render_site()
# How to publish this in Git
#Let's add all the files to our git staging area
#git add -A #the -A flag tells it git you want everything
#Now we can commit
#git commit -m "My first website commit. The begining of greatness" .Note that the comment must change everytime to update the master branch in github.
#Now we push. Note the addendum to normal pushing
#git push origin master
#+ [Verba, Sidney, Kay Lehman, Henry Brady & Norman H. Nie. 1993. ``Citizen Activity: Who Participates? What Do They Say?'' *American Political Science Review* 87(2): 303-318.](Pol1_Summer2017/Verba, Schlozman, Brady & Nie 1993.pdf)
#7. [**Meeting 18**:]() Self-Interest & The American Bureaucratic Structure
#+ [Moe, Terry M. 1989. ``The Politics of the Bureaucratic Structure.''  In John E. Chubb & Paul E. Peterson eds., *Can The Government Govern?* Washington, DC: The Brookings Institution 1989.](Pol1_Fall2017/Rohde & Barthelemy 2010.pdf)
#+ *Kollman Text:* Chapter 7: *The Bureacracy* Sections: What is the Federal Bureacracy, Why Do We Need a Federal Bureacracy and Principals & Agents in the Executive Bureacracy
#<br/>
#install.packages("rmarkdown", type = "source")
library(rmarkdown)
#touch _site.yml #"YML" file that tells your website how to assemble itself
#touch index.Rmd #Create the main rmd file
#touch about.Rmd #Create an about file
setwd("/Users/carlosalgara/Dropbox/Github_Website/calgara.github.io")
rmarkdown::render_site()
# How to publish this in Git
#Let's add all the files to our git staging area
#git add -A #the -A flag tells it git you want everything
#Now we can commit
#git commit -m "My first website commit. The begining of greatness" .Note that the comment must change everytime to update the master branch in github.
#Now we push. Note the addendum to normal pushing
#git push origin master
#+ [Verba, Sidney, Kay Lehman, Henry Brady & Norman H. Nie. 1993. ``Citizen Activity: Who Participates? What Do They Say?'' *American Political Science Review* 87(2): 303-318.](Pol1_Summer2017/Verba, Schlozman, Brady & Nie 1993.pdf)
#7. [**Meeting 18**:]() Self-Interest & The American Bureaucratic Structure
#+ [Moe, Terry M. 1989. ``The Politics of the Bureaucratic Structure.''  In John E. Chubb & Paul E. Peterson eds., *Can The Government Govern?* Washington, DC: The Brookings Institution 1989.](Pol1_Fall2017/Rohde & Barthelemy 2010.pdf)
#+ *Kollman Text:* Chapter 7: *The Bureacracy* Sections: What is the Federal Bureacracy, Why Do We Need a Federal Bureacracy and Principals & Agents in the Executive Bureacracy
#<br/>
