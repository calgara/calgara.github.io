library(plyr)
library(dplyr)
#########################################################################################################
# Senate (1969-2017, 91st - 115th Congress)
counter <- paste("k", seq(91,115,1), sep="")
plots_senate <- list()
senate_leg_ideo <- list()
plots_senate_congress <- list()
senate_leg_ideo <- list()
cutting_lines_congress <- list()
for(k in 91:115){
s <- voteview_search("", chamber = "Senate", congress=k)
sr <- voteview_download(s$id)
result <- wnominate(sr, ubeta = 15, uweights = 0.5, dims = 2, minvotes = 20, lop = 0.025, trials = 3, polarity=list("icpsr", c(sr$legis.data$icpsr[which.max(sr$legis.data$dim1)],sr$legis.data$icpsr[which.max(sr$legis.data$dim2)])))
# Get rid of bills with over 97.5% support or against, this screws up the loop and follows
s <- subset(s,s$support < 97.5 & s$support > 2.5)
a <- s$rollnumber
counter <- paste("x", unique(a), sep="")
for (i in unique(a)){
vote <- as.integer(sr$votes[,i]) # store legislator's votes in the vector "vote"
DL1 <- result$rollcalls[i,7] # assign first dimension spread
DL2 <- result$rollcalls[i,8] # assign second dimension spread
ZM1 <- result$rollcalls[i,9] # assign first dimension midpoint
ZM2 <- result$rollcalls[i,10] # assign second dimension midpoint
YEA1 <- ZM1-DL1 # calculate the location of the yea alternative
WEIGHT <- (result$weights[2])/(result$weights[1]) # calculate the dimension weight
YEA2W <- (ZM2-DL2)*WEIGHT # ""
NAY1 <- ZM1+DL1 # calculate the location of the nay alternative
NAY2W <- (ZM2+DL2)*WEIGHT # ""
A1 <- NAY1 - YEA1 # in order to calcuate the normal vector, calculate the distances on first dimension
A2 <- NAY2W - YEA2W # in order to calcuate the normal vector, calculate the distances on second dimension
# Calculate normal vector. "Note that the normal vector is reflected around the origin, and so
# we can flip the coordinates N1W and N2W (multiplying both by −1) so that the first-dimension coordinate # of the normal vector is positive" (Armstrong et al. 2014). This will give us the normal vector for cutting plane of the vote
ALENGTH <- sqrt(A1*A1 + A2*A2)
N1W <- A1/ALENGTH
N2W <- A2/ALENGTH
N1W <- ifelse(N1W == "NaN", 0, N1W)
N2W <- ifelse(N2W == "NaN", 0, N2W)
if (N1W < 0){
N1W <- -N1W
N2W <- -N2W
}
# Calculate the cutting plane. "Specifically, the cutting plane is the line between the points (xws+N2W,yws-N1W) and (xws-N2W,yws+N1W)" (Armstrong et al. 2014)
ws <- N1W*ZM1 + N2W*ZM2*WEIGHT
xws <- ws*N1W
yws <- ws*N2W
# Make the plot
x <- result$legislators
x$lastname <- gsub(",.*$", "", x$name)
x$state_abbrev <- paste("(",x$state_abbrev,")")
x$state_abbrev <- gsub(" ","",x$state_abbrev)
x$label <- paste(x$lastname,x$state_abbrev)
x$party_code <- ifelse(x$party_code %in% 328, 100, x$party_code)
x$party_code <- factor(x$party_code)
# Color based on observed votes
obs_vote <- data.frame(vote = sr$votes[,i])
obs_vote$icpsr <- rownames(obs_vote)
obs_vote$vote <- ifelse(obs_vote$vote == 6,"Nay",ifelse(obs_vote$vote == 1, "Yea", NA))
obs_vote$vote <- factor(obs_vote$vote,levels=c("Nay","Yea"))
x <- merge(x,obs_vote,by=c("icpsr"))
#Specify color
myColors <- c("red","blue")
names(myColors) <- levels(x$vote)
colScale <- scale_colour_manual("",values = c("red","blue"), guide = FALSE)
x$leg <- s$text[s$rollnumber == i]
x$title <- paste(s$question[s$rollnumber == i],s$bill_number[s$rollnumber == i],s$date[s$rollnumber == i])
# Cutting plane coordinates
cutting_line <- data.frame(x_start = xws+N2W, y_start = yws-N1W, xend = xws-N2W, yend = yws+N1W)
cutting_line$pivotal_1dim_location <- (cutting_line$x_start + cutting_line$xend)/2
cutting_line$pivotal_2dim_location <- (cutting_line$y_start + cutting_line$yend)/2
# Number of errors
X1 <- result$legislators$coord1D
X2 <- (result$legislators$coord2D)*WEIGHT
kpyea <- sum(vote==1)
kpnay <- sum(vote==6)
polarity <- X1*N1W + X2*N2W - ws
errors1 <- vote==1 & polarity >= 0
errors2 <- vote==6 & polarity <= 0
errors3 <- vote==1 & polarity <= 0
errors4 <- vote==6 & polarity >= 0
kerrors12 <- sum(errors1==1,na.rm=T)+sum(errors2==1,na.rm=T)
kerrors34 <- sum(errors3==1,na.rm=T)+sum(errors4==1,na.rm=T)
if (kerrors12 >= kerrors34){
yeaerror <- errors3
nayerror <- errors4
}
if (kerrors12 < kerrors34){
yeaerror <- errors1
nayerror <- errors2
}
kerrorsmin <- min(kerrors12,kerrors34)
PRE <- (min(kpyea,kpnay) - kerrorsmin) / min(kpyea,kpnay) # Proportional Reduction in error
errors <- paste("Errors =",kerrorsmin)
prel <- paste("PRE =",round(PRE, digits = 3))
yeas <- paste("Yeas =",round(kpyea, digits = 3))
nays <- paste("Nays =",round(kpnay, digits = 3))
pred_yea_x <- ifelse(cutting_line$pivotal_1dim_location < 0.10, -0.5, ifelse(cutting_line$pivotal_1dim_location >= 0.10, 0.5, NA))
pred_yea_y <- ifelse(cutting_line$pivotal_1dim_location < 0.10, -0.80, ifelse(cutting_line$pivotal_1dim_location >= 0.10, 0.80, NA))
pred_nay_x <- ifelse(cutting_line$pivotal_1dim_location < 0.10, 0.5, ifelse(cutting_line$pivotal_1dim_location >= 0.10, -0.5, NA))
pred_nay_y <- ifelse(cutting_line$pivotal_1dim_location < 0.10, 0.80, ifelse(cutting_line$pivotal_1dim_location >= 0.10, -0.80, NA))
plot <- ggplot(x, aes(x = coord1D, y = coord2D, label = label, colour=vote)) + geom_text(size = 2, alpha = 1) + colScale + theme_bw() + scale_shape_manual(values = label) + theme(legend.position=c(0.86, 0.86), legend.key.size = unit(1.70,"line")) + scale_y_continuous(breaks=seq(-1,1,0.5), "Second Dimension (W-NOMINATE)") + scale_x_continuous(breaks=seq(-1,1,0.5), "First Dimension (W-NOMINATE)") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + ggtitle(paste(s$question[s$rollnumber == i],s$bill_number[s$rollnumber == i],s$date[s$rollnumber == i])) + facet_wrap(~leg, ncol = 1, scales = "free_x") +  geom_segment(data = cutting_line, aes(x = x_start, y = y_start, xend =xend, yend = yend), inherit.aes = F) + annotate(geom = "text", x = pred_yea_x, y = pred_yea_y, label = "Predicted Yea", color = "blue") + annotate(geom = "text", x = pred_nay_x, y = pred_nay_y, label = "Predicted Nay", color = "red") + annotate(geom = "text", x = -0.95, y = 1, label = yeas, color = "blue") + annotate(geom = "text", x = -0.95, y = 0.925, label = nays, color = "red") + annotate(geom = "text", x = -0.95, y = 0.85, label = errors, color = "black") + annotate(geom = "text", x = -0.95, y = 0.775, label = prel, color = "black") + annotate(geom = "text", x = cutting_line$pivotal_1dim_location, y = cutting_line$pivotal_2dim_location, label = "P", fontface='italic', color = "purple",size=4)
#+ geom_rug(aes(x=x$coord1D),color = "gray30", alpha=.5, size = 0.25, position='jitter')
cutting_line$errors <- kerrorsmin
cutting_line$pre <- PRE
cutting_line$yeas <- kpyea
cutting_line$nays <- kpnay
cutting_line$wnom_midpoint_1d <- result$rollcalls[i,9]
cutting_line$wnom_midpoint_2d <- result$rollcalls[i,10]
cutting_line$spread1d_wnom <- result$rollcalls[i,7]
cutting_line$spread2d_wnom <- result$rollcalls[i,8]
cutting_line$question <- s$question[s$rollnumber == i]
cutting_line$date <- s$date[s$rollnumber == i]
cutting_line$rollnumber <- i
cutting_line$bill_number <- s$bill_number[s$rollnumber == i]
cutting_line$bill_text <- s$text[s$rollnumber == i]
cutting_line$vote_result <- s$vote_result[s$rollnumber == i]
cutting_line$congress <- s$congress[s$rollnumber == i]
cutting_line$support_percentage <- s$support[s$rollnumber == i]
cutting_lines_congress[[i]] <- cutting_line
plots_senate[[i]] <- plot
}
senate_leg_ideo[[k]] <- cutting_lines_congress
plots_senate_congress[[k]] <- plots_senate
}
library(Rvoteview)
library(ggplot2)
library(grid)
library(gridExtra)
library(wnominate)
library(plyr)
library(dplyr)
#########################################################################################################
# Senate (1969-2017, 91st - 115th Congress)
counter <- paste("k", seq(91,115,1), sep="")
plots_senate <- list()
senate_leg_ideo <- list()
plots_senate_congress <- list()
senate_leg_ideo <- list()
cutting_lines_congress <- list()
for(k in 91:115){
s <- voteview_search("", chamber = "Senate", congress=k)
sr <- voteview_download(s$id)
result <- wnominate(sr, ubeta = 15, uweights = 0.5, dims = 2, minvotes = 20, lop = 0.025, trials = 3, polarity=list("icpsr", c(sr$legis.data$icpsr[which.max(sr$legis.data$dim1)],sr$legis.data$icpsr[which.max(sr$legis.data$dim2)])))
# Get rid of bills with over 97.5% support or against, this screws up the loop and follows
s <- subset(s,s$support < 97.5 & s$support > 2.5)
a <- s$rollnumber
counter <- paste("x", unique(a), sep="")
for (i in unique(a)){
vote <- as.integer(sr$votes[,i]) # store legislator's votes in the vector "vote"
DL1 <- result$rollcalls[i,7] # assign first dimension spread
DL2 <- result$rollcalls[i,8] # assign second dimension spread
ZM1 <- result$rollcalls[i,9] # assign first dimension midpoint
ZM2 <- result$rollcalls[i,10] # assign second dimension midpoint
YEA1 <- ZM1-DL1 # calculate the location of the yea alternative
WEIGHT <- (result$weights[2])/(result$weights[1]) # calculate the dimension weight
YEA2W <- (ZM2-DL2)*WEIGHT # ""
NAY1 <- ZM1+DL1 # calculate the location of the nay alternative
NAY2W <- (ZM2+DL2)*WEIGHT # ""
A1 <- NAY1 - YEA1 # in order to calcuate the normal vector, calculate the distances on first dimension
A2 <- NAY2W - YEA2W # in order to calcuate the normal vector, calculate the distances on second dimension
# Calculate normal vector. "Note that the normal vector is reflected around the origin, and so
# we can flip the coordinates N1W and N2W (multiplying both by −1) so that the first-dimension coordinate # of the normal vector is positive" (Armstrong et al. 2014). This will give us the normal vector for cutting plane of the vote
ALENGTH <- sqrt(A1*A1 + A2*A2)
N1W <- A1/ALENGTH
N2W <- A2/ALENGTH
N1W <- ifelse(N1W == "NaN", 0, N1W)
N2W <- ifelse(N2W == "NaN", 0, N2W)
if (N1W < 0){
N1W <- -N1W
N2W <- -N2W
}
# Calculate the cutting plane. "Specifically, the cutting plane is the line between the points (xws+N2W,yws-N1W) and (xws-N2W,yws+N1W)" (Armstrong et al. 2014)
ws <- N1W*ZM1 + N2W*ZM2*WEIGHT
xws <- ws*N1W
yws <- ws*N2W
# Make the plot
x <- result$legislators
x$lastname <- gsub(",.*$", "", x$name)
x$state_abbrev <- paste("(",x$state_abbrev,")")
x$state_abbrev <- gsub(" ","",x$state_abbrev)
x$label <- paste(x$lastname,x$state_abbrev)
x$party_code <- ifelse(x$party_code %in% 328, 100, x$party_code)
x$party_code <- factor(x$party_code)
# Color based on observed votes
obs_vote <- data.frame(vote = sr$votes[,i])
obs_vote$icpsr <- rownames(obs_vote)
obs_vote$vote <- ifelse(obs_vote$vote == 6,"Nay",ifelse(obs_vote$vote == 1, "Yea", NA))
obs_vote$vote <- factor(obs_vote$vote,levels=c("Nay","Yea"))
x <- merge(x,obs_vote,by=c("icpsr"))
#Specify color
myColors <- c("red","blue")
names(myColors) <- levels(x$vote)
colScale <- scale_colour_manual("",values = c("red","blue"), guide = FALSE)
x$leg <- s$text[s$rollnumber == i]
x$title <- paste(s$question[s$rollnumber == i],s$bill_number[s$rollnumber == i],s$date[s$rollnumber == i])
# Cutting plane coordinates
cutting_line <- data.frame(x_start = xws+N2W, y_start = yws-N1W, xend = xws-N2W, yend = yws+N1W)
cutting_line$pivotal_1dim_location <- (cutting_line$x_start + cutting_line$xend)/2
cutting_line$pivotal_2dim_location <- (cutting_line$y_start + cutting_line$yend)/2
# Number of errors
X1 <- result$legislators$coord1D
X2 <- (result$legislators$coord2D)*WEIGHT
kpyea <- sum(vote==1)
kpnay <- sum(vote==6)
polarity <- X1*N1W + X2*N2W - ws
errors1 <- vote==1 & polarity >= 0
errors2 <- vote==6 & polarity <= 0
errors3 <- vote==1 & polarity <= 0
errors4 <- vote==6 & polarity >= 0
kerrors12 <- sum(errors1==1,na.rm=T)+sum(errors2==1,na.rm=T)
kerrors34 <- sum(errors3==1,na.rm=T)+sum(errors4==1,na.rm=T)
if (kerrors12 >= kerrors34){
yeaerror <- errors3
nayerror <- errors4
}
if (kerrors12 < kerrors34){
yeaerror <- errors1
nayerror <- errors2
}
kerrorsmin <- min(kerrors12,kerrors34)
PRE <- (min(kpyea,kpnay) - kerrorsmin) / min(kpyea,kpnay) # Proportional Reduction in error
errors <- paste("Errors =",kerrorsmin)
prel <- paste("PRE =",round(PRE, digits = 3))
yeas <- paste("Yeas =",round(kpyea, digits = 3))
nays <- paste("Nays =",round(kpnay, digits = 3))
pred_yea_x <- ifelse(cutting_line$pivotal_1dim_location < 0.10, -0.5, ifelse(cutting_line$pivotal_1dim_location >= 0.10, 0.5, NA))
pred_yea_y <- ifelse(cutting_line$pivotal_1dim_location < 0.10, -0.80, ifelse(cutting_line$pivotal_1dim_location >= 0.10, 0.80, NA))
pred_nay_x <- ifelse(cutting_line$pivotal_1dim_location < 0.10, 0.5, ifelse(cutting_line$pivotal_1dim_location >= 0.10, -0.5, NA))
pred_nay_y <- ifelse(cutting_line$pivotal_1dim_location < 0.10, 0.80, ifelse(cutting_line$pivotal_1dim_location >= 0.10, -0.80, NA))
plot <- ggplot(x, aes(x = coord1D, y = coord2D, label = label, colour=vote)) + geom_text(size = 2, alpha = 1) + colScale + theme_bw() + scale_shape_manual(values = label) + theme(legend.position=c(0.86, 0.86), legend.key.size = unit(1.70,"line")) + scale_y_continuous(breaks=seq(-1,1,0.5), "Second Dimension (W-NOMINATE)") + scale_x_continuous(breaks=seq(-1,1,0.5), "First Dimension (W-NOMINATE)") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + ggtitle(paste(s$question[s$rollnumber == i],s$bill_number[s$rollnumber == i],s$date[s$rollnumber == i])) + facet_wrap(~leg, ncol = 1, scales = "free_x") +  geom_segment(data = cutting_line, aes(x = x_start, y = y_start, xend =xend, yend = yend), inherit.aes = F) + annotate(geom = "text", x = pred_yea_x, y = pred_yea_y, label = "Predicted Yea", color = "blue") + annotate(geom = "text", x = pred_nay_x, y = pred_nay_y, label = "Predicted Nay", color = "red") + annotate(geom = "text", x = -0.95, y = 1, label = yeas, color = "blue") + annotate(geom = "text", x = -0.95, y = 0.925, label = nays, color = "red") + annotate(geom = "text", x = -0.95, y = 0.85, label = errors, color = "black") + annotate(geom = "text", x = -0.95, y = 0.775, label = prel, color = "black") + annotate(geom = "text", x = cutting_line$pivotal_1dim_location, y = cutting_line$pivotal_2dim_location, label = "P", fontface='italic', color = "purple",size=4)
#+ geom_rug(aes(x=x$coord1D),color = "gray30", alpha=.5, size = 0.25, position='jitter')
cutting_line$errors <- kerrorsmin
cutting_line$pre <- PRE
cutting_line$yeas <- kpyea
cutting_line$nays <- kpnay
cutting_line$wnom_midpoint_1d <- result$rollcalls[i,9]
cutting_line$wnom_midpoint_2d <- result$rollcalls[i,10]
cutting_line$spread1d_wnom <- result$rollcalls[i,7]
cutting_line$spread2d_wnom <- result$rollcalls[i,8]
cutting_line$question <- s$question[s$rollnumber == i]
cutting_line$date <- s$date[s$rollnumber == i]
cutting_line$rollnumber <- i
cutting_line$bill_number <- s$bill_number[s$rollnumber == i]
cutting_line$bill_text <- s$text[s$rollnumber == i]
cutting_line$vote_result <- s$vote_result[s$rollnumber == i]
cutting_line$congress <- s$congress[s$rollnumber == i]
cutting_line$support_percentage <- s$support[s$rollnumber == i]
cutting_lines_congress[[i]] <- cutting_line
plots_senate[[i]] <- plot
}
senate_leg_ideo[[k]] <- cutting_lines_congress
plots_senate_congress[[k]] <- plots_senate
}
leg_ideo <- list()
for(k in 91:115){
legislation <- senate_leg_ideo[[k]]
legislation <- ldply(legislation, data.frame)
leg_ideo[[k]] <- legislation
}
legisation_ideology_senate <- ldply(leg_ideo, data.frame)
#########################################################################################################
# House (1969-2017, 91st - 115th Congress)
counter <- paste("k", seq(91,115,1), sep="")
plots_house <- list()
house_leg_ideo <- list()
plots_house_congress <- list()
house_leg_ideo <- list()
cutting_lines_congress <- list()
for(k in 91:115){
s <- voteview_search("", chamber = "House", congress=k)
sr <- voteview_download(s$id)
result <- wnominate(sr, ubeta = 15, uweights = 0.5, dims = 2, minvotes = 20, lop = 0.025, trials = 3, polarity=list("icpsr", c(sr$legis.data$icpsr[which.max(sr$legis.data$dim1)],sr$legis.data$icpsr[which.max(sr$legis.data$dim2)])))
# Get rid of bills with over 97.5% support or against, this screws up the loop and follows
s <- subset(s,s$support < 97.5 & s$support > 2.5)
a <- s$rollnumber
counter <- paste("x", unique(a), sep="")
for (i in unique(a)){
vote <- as.integer(sr$votes[,i]) # store legislator's votes in the vector "vote"
DL1 <- result$rollcalls[i,7] # assign first dimension spread
DL2 <- result$rollcalls[i,8] # assign second dimension spread
ZM1 <- result$rollcalls[i,9] # assign first dimension midpoint
ZM2 <- result$rollcalls[i,10] # assign second dimension midpoint
YEA1 <- ZM1-DL1 # calculate the location of the yea alternative
WEIGHT <- (result$weights[2])/(result$weights[1]) # calculate the dimension weight
YEA2W <- (ZM2-DL2)*WEIGHT # ""
NAY1 <- ZM1+DL1 # calculate the location of the nay alternative
NAY2W <- (ZM2+DL2)*WEIGHT # ""
A1 <- NAY1 - YEA1 # in order to calcuate the normal vector, calculate the distances on first dimension
A2 <- NAY2W - YEA2W # in order to calcuate the normal vector, calculate the distances on second dimension
# Calculate normal vector. "Note that the normal vector is reflected around the origin, and so
# we can flip the coordinates N1W and N2W (multiplying both by −1) so that the first-dimension coordinate # of the normal vector is positive" (Armstrong et al. 2014). This will give us the normal vector for cutting plane of the vote
ALENGTH <- sqrt(A1*A1 + A2*A2)
N1W <- A1/ALENGTH
N2W <- A2/ALENGTH
N1W <- ifelse(N1W == "NaN", 0, N1W)
N2W <- ifelse(N2W == "NaN", 0, N2W)
if (N1W < 0){
N1W <- -N1W
N2W <- -N2W
}
# Calculate the cutting plane. "Specifically, the cutting plane is the line between the points (xws+N2W,yws-N1W) and (xws-N2W,yws+N1W)" (Armstrong et al. 2014)
ws <- N1W*ZM1 + N2W*ZM2*WEIGHT
xws <- ws*N1W
yws <- ws*N2W
# Make the plot
x <- result$legislators
x$lastname <- gsub(",.*$", "", x$name)
x$state_abbrev <- paste("(",x$state_abbrev,")")
x$state_abbrev <- gsub(" ","",x$state_abbrev)
x$label <- paste(x$lastname,x$state_abbrev)
x$party_code <- ifelse(x$party_code %in% 328, 100, x$party_code)
x$party_code <- factor(x$party_code)
# Color based on observed votes
obs_vote <- data.frame(vote = sr$votes[,i])
obs_vote$icpsr <- rownames(obs_vote)
obs_vote$vote <- ifelse(obs_vote$vote == 6,"Nay",ifelse(obs_vote$vote == 1, "Yea", NA))
obs_vote$vote <- factor(obs_vote$vote,levels=c("Nay","Yea"))
x <- merge(x,obs_vote,by=c("icpsr"))
#Specify color
myColors <- c("red","blue")
names(myColors) <- levels(x$vote)
colScale <- scale_colour_manual("",values = c("red","blue"), guide = FALSE)
x$leg <- s$text[s$rollnumber == i]
x$title <- paste(s$question[s$rollnumber == i],s$bill_number[s$rollnumber == i],s$date[s$rollnumber == i])
# Cutting plane coordinates
cutting_line <- data.frame(x_start = xws+N2W, y_start = yws-N1W, xend = xws-N2W, yend = yws+N1W)
cutting_line$pivotal_1dim_location <- (cutting_line$x_start + cutting_line$xend)/2
cutting_line$pivotal_2dim_location <- (cutting_line$y_start + cutting_line$yend)/2
# Number of errors
X1 <- result$legislators$coord1D
X2 <- (result$legislators$coord2D)*WEIGHT
kpyea <- sum(vote==1)
kpnay <- sum(vote==6)
polarity <- X1*N1W + X2*N2W - ws
errors1 <- vote==1 & polarity >= 0
errors2 <- vote==6 & polarity <= 0
errors3 <- vote==1 & polarity <= 0
errors4 <- vote==6 & polarity >= 0
kerrors12 <- sum(errors1==1,na.rm=T)+sum(errors2==1,na.rm=T)
kerrors34 <- sum(errors3==1,na.rm=T)+sum(errors4==1,na.rm=T)
if (kerrors12 >= kerrors34){
yeaerror <- errors3
nayerror <- errors4
}
if (kerrors12 < kerrors34){
yeaerror <- errors1
nayerror <- errors2
}
kerrorsmin <- min(kerrors12,kerrors34)
PRE <- (min(kpyea,kpnay) - kerrorsmin) / min(kpyea,kpnay) # Proportional Reduction in error
errors <- paste("Errors =",kerrorsmin)
prel <- paste("PRE =",round(PRE, digits = 3))
yeas <- paste("Yeas =",round(kpyea, digits = 3))
nays <- paste("Nays =",round(kpnay, digits = 3))
pred_yea_x <- ifelse(cutting_line$pivotal_1dim_location < 0.10, -0.5, ifelse(cutting_line$pivotal_1dim_location >= 0.10, 0.5, NA))
pred_yea_y <- ifelse(cutting_line$pivotal_1dim_location < 0.10, -0.80, ifelse(cutting_line$pivotal_1dim_location >= 0.10, 0.80, NA))
pred_nay_x <- ifelse(cutting_line$pivotal_1dim_location < 0.10, 0.5, ifelse(cutting_line$pivotal_1dim_location >= 0.10, -0.5, NA))
pred_nay_y <- ifelse(cutting_line$pivotal_1dim_location < 0.10, 0.80, ifelse(cutting_line$pivotal_1dim_location >= 0.10, -0.80, NA))
plot <- ggplot(x, aes(x = coord1D, y = coord2D, label = label, colour=vote)) + geom_text(size = 2, alpha = 1) + colScale + theme_bw() + scale_shape_manual(values = label) + theme(legend.position=c(0.86, 0.86), legend.key.size = unit(1.70,"line")) + scale_y_continuous(breaks=seq(-1,1,0.5), "Second Dimension (W-NOMINATE)") + scale_x_continuous(breaks=seq(-1,1,0.5), "First Dimension (W-NOMINATE)") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + ggtitle(paste(s$question[s$rollnumber == i],s$bill_number[s$rollnumber == i],s$date[s$rollnumber == i])) + facet_wrap(~leg, ncol = 1, scales = "free_x") +  geom_segment(data = cutting_line, aes(x = x_start, y = y_start, xend =xend, yend = yend), inherit.aes = F) + annotate(geom = "text", x = pred_yea_x, y = pred_yea_y, label = "Predicted Yea", color = "blue") + annotate(geom = "text", x = pred_nay_x, y = pred_nay_y, label = "Predicted Nay", color = "red") + annotate(geom = "text", x = -0.95, y = 1, label = yeas, color = "blue") + annotate(geom = "text", x = -0.95, y = 0.925, label = nays, color = "red") + annotate(geom = "text", x = -0.95, y = 0.85, label = errors, color = "black") + annotate(geom = "text", x = -0.95, y = 0.775, label = prel, color = "black") + annotate(geom = "text", x = cutting_line$pivotal_1dim_location, y = cutting_line$pivotal_2dim_location, label = "P", fontface='italic', color = "purple",size=4)
#+ geom_rug(aes(x=x$coord1D),color = "gray30", alpha=.5, size = 0.25, position='jitter')
cutting_line$errors <- kerrorsmin
cutting_line$pre <- PRE
cutting_line$yeas <- kpyea
cutting_line$nays <- kpnay
cutting_line$wnom_midpoint_1d <- result$rollcalls[i,9]
cutting_line$wnom_midpoint_2d <- result$rollcalls[i,10]
cutting_line$spread1d_wnom <- result$rollcalls[i,7]
cutting_line$spread2d_wnom <- result$rollcalls[i,8]
cutting_line$question <- s$question[s$rollnumber == i]
cutting_line$date <- s$date[s$rollnumber == i]
cutting_line$rollnumber <- i
cutting_line$bill_number <- s$bill_number[s$rollnumber == i]
cutting_line$bill_text <- s$text[s$rollnumber == i]
cutting_line$vote_result <- s$vote_result[s$rollnumber == i]
cutting_line$congress <- s$congress[s$rollnumber == i]
cutting_line$support_percentage <- s$support[s$rollnumber == i]
cutting_lines_congress[[i]] <- cutting_line
plots_house[[i]] <- plot
}
house_leg_ideo[[k]] <- cutting_lines_congress
plots_house_congress[[k]] <- plots_senate
}
leg_ideo <- list()
for(k in 91:115){
legislation <- house_leg_ideo[[k]]
legislation <- ldply(legislation, data.frame)
leg_ideo[[k]] <- legislation
}
legisation_ideology_house <- ldply(leg_ideo, data.frame)
# Write files
library(zoo)
legisation_ideology_senate$date <- as.Date(legisation_ideology_senate$date)
legisation_ideology_senate$quarter <- as.yearqtr(legisation_ideology_senate$date, format = "%Y-%m-%d")
legisation_ideology_house$date <- as.Date(legisation_ideology_house$date)
legisation_ideology_house$quarter <- as.yearqtr(legisation_ideology_house$date, format = "%Y-%m-%d")
legisation_ideology_senate$leg_passed <- ifelse(legisation_ideology_senate$support_percentage >= 50, 1, ifelse(legisation_ideology_senate$support_percentage < 50, 0, NA))
legisation_ideology_house$leg_passed <- ifelse(legisation_ideology_house$support_percentage >= 50, 1, ifelse(legisation_ideology_house$support_percentage < 50, 0, NA))
write.csv(legisation_ideology_senate, "/Users/carlosalgara/Desktop/carlos_school/PhD_UC Davis/Research/Submissions & Applications/MPSA_2018/Algara_Liu/Data/senate_legislation_ideology.csv")
write.csv(legisation_ideology_house, "/Users/carlosalgara/Desktop/carlos_school/PhD_UC Davis/Research/Submissions & Applications/MPSA_2018/Algara_Liu/Data/house_legislation_ideology.csv")
View(legisation_ideology_house)
library(readstata13)
library(foreign)
library(MASS)
library(UsingR)
library(nlme)
library(Zelig)
library(lmtest)
library(sandwich)
library(car)
library(directlabels)
library(bbmle)
library(maxLik)
library(ggplot2)
library(RGraphics)
library(lattice)
library(latticeExtra)
library(VGAM)
library(mvtnorm)
library(ordinal)
library(nnet)
library(sampleSelection)
library(pscl)
library(lmtest)
library(aod)
library(scales)
library(gridExtra)
library(reshape2)
library(network)
library(Matrix)
library(igraph)
library(gmodels)
library(pastecs)
#library(dplyr)
library(plyr)
library(arm)
library(coefplot)
library(psych)
library(descr)
library(data.table)
library(multiwayvcov)
library(compositions)
library(rms)
library(effects)
house <- read.dta13("/Users/carlosalgara/Desktop/carlos_school/PhD_UC Davis/Research/Data/American Politics/Jacobson_House_Elections/SH_Aggregatedata_1946-2014_version12_CLEAN_Master.dta", convert.underscore = FALSE, encoding ="UTF-8")
senate$dv <- ifelse(senate$electionidentifier == "2006 VT", senate$tpv, ifelse(senate$electionidentifier == "2012 VT", senate$tpv, senate$dv))
senate$dv <- as.numeric(senate$dv)
senate$rv <- as.numeric(senate$rv)
senate$d_presvote <- as.numeric(senate$d_presvote)
senate$r_presvote <- as.numeric(senate$r_presvote)
senate <- subset(senate,senate$year %in% seq(1914,2016,2))
senate$dv <- (senate$dv/(senate$dv + senate$rv))
senate$d_presvote <- (senate$d_presvote/(senate$d_presvote + senate$r_presvote))
library(readstata13)
library(foreign)
library(MASS)
library(UsingR)
library(nlme)
library(Zelig)
library(lmtest)
library(sandwich)
library(car)
library(directlabels)
library(bbmle)
library(maxLik)
library(ggplot2)
library(RGraphics)
library(lattice)
library(latticeExtra)
library(VGAM)
library(mvtnorm)
library(ordinal)
library(nnet)
library(sampleSelection)
library(pscl)
library(lmtest)
library(aod)
library(scales)
library(gridExtra)
library(reshape2)
library(network)
library(Matrix)
library(igraph)
library(gmodels)
library(pastecs)
#library(dplyr)
library(plyr)
library(arm)
library(coefplot)
library(psych)
library(descr)
library(data.table)
library(multiwayvcov)
library(compositions)
library(rms)
library(effects)
house <- read.dta13("/Users/carlosalgara/Desktop/carlos_school/PhD_UC Davis/Research/Data/American Politics/Jacobson_House_Elections/SH_Aggregatedata_1946-2014_version12_CLEAN_Master.dta", convert.underscore = FALSE, encoding ="UTF-8")
senate <- read.dta13("/Users/carlosalgara/Desktop/carlos_school/PhD_UC Davis/Research/Data/American Politics/Senate_Elections_UVA_Aggregate/senate_elections_1914_2016_algara.dta", convert.underscore = FALSE, encoding ="UTF-8")
senate$dv <- ifelse(senate$electionidentifier == "2006 VT", senate$tpv, ifelse(senate$electionidentifier == "2012 VT", senate$tpv, senate$dv))
senate$dv <- as.numeric(senate$dv)
senate$rv <- as.numeric(senate$rv)
senate$d_presvote <- as.numeric(senate$d_presvote)
senate$r_presvote <- as.numeric(senate$r_presvote)
senate <- subset(senate,senate$year %in% seq(1914,2016,2))
senate$dv <- (senate$dv/(senate$dv + senate$rv))
senate$d_presvote <- (senate$d_presvote/(senate$d_presvote + senate$r_presvote))
View(senate)
library(rmarkdown)
#touch _site.yml #"YML" file that tells your website how to assemble itself
#touch index.Rmd #Create the main rmd file
#touch about.Rmd #Create an about file
setwd("/Users/carlosalgara/Dropbox/Github_Website/calgara.github.io")
rmarkdown::render_site()
